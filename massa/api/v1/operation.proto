// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.api.v1;

import "common.proto";

option csharp_namespace = "Com.Massa.Api.V1";
option go_package = "github.com/massalabs/massa/api/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.api.v1";
option objc_class_prefix = "GRPC";
option php_namespace = "Com\\Massa\\Api\\V1";
option ruby_package = "Com::Massa::Api::V1";
option swift_prefix = "GRPC";

// The operation as sent in the network
message Operation {
  // The fee they have decided for this operation
  fixed64 fee = 1;
  // After `expire_period` slot the operation won't be included in a block
  fixed64 expire_period = 2;
  // The type specific operation part
  OperationType op = 3;
}

// Type specific operation content
message OperationType {
  // Transfer coins from sender to recipient
  Transaction transaction = 1;
  // The sender buys `roll_count` rolls. Roll price is defined in configuration
  RollBuy roll_buy = 2;
  // The sender sells `roll_count` rolls. Roll price is defined in configuration
  RollSell roll_sell = 3;
  // Execute a smart contract
  ExecuteSC execut_sc = 4;
  // Calls an exported function from a stored smart contract
  CallSC call_sc = 5;
}

// Transfer coins from sender to recipient
message Transaction {
  // Recipient address
  string recipient_address = 1;
  // Amount
  fixed64 amount = 2;
}

// The sender buys `roll_count` rolls. Roll price is defined in configuration
message RollBuy {
  // Roll count
  fixed64 roll_count = 1;
}

// The sender sells `roll_count` rolls. Roll price is defined in configuration
message RollSell {
  // Roll count
  fixed64 roll_count = 1;
}

// Execute a smart contract
message ExecuteSC {
  // Smart contract bytecode.
  bytes data = 1;
  // The maximum of coins that could be spent by the operation sender
  fixed64 max_coins = 2;
  // The maximum amount of gas that the execution of the contract is allowed to cost
  fixed64 max_gas = 3;
  // A key-value store associating a hash to arbitrary bytes
  repeated BytesMapFieldEntry datastore = 4;
}

// Calls an exported function from a stored smart contract
message CallSC {
  // Target smart contract address
  string target_addr = 1;
  // Target function name. No function is called if empty
  string target_func = 2;
  // Parameter to pass to the target function
  bytes param = 3;
  // The maximum amount of gas that the execution of the contract is allowed to cost
  fixed64 max_gas = 4;
  // Extra coins that are spent from the caller's balance and transferred to the target
  fixed64 coins = 5;
}

// Signed operation
message SignedOperation {
  // Operation
  Operation content = 1;
  // A cryptographically generated value using `serialized_data` and a public key.
  string signature = 2;
  // The public-key component used in the generation of the signature
  string content_creator_pub_key = 3;
  // Derived from the same public key used to generate the signature
  string content_creator_address = 4;
  // A secure hash of the data. See also [massa_hash::Hash]
  string id = 5;
}

// Possible statuses for an operation
enum OperationStatus {
  OPERATION_STATUS_UNSPECIFIED = 0;  // Default enum value
  OPERATION_STATUS_PENDING = 1;  // The operation is still pending
  OPERATION_STATUS_FINAL = 2;  // The operation is final
  OPERATION_STATUS_SUCCESS = 3;  // The operation was executed successfully
  OPERATION_STATUS_FAILURE = 4;  // The operation failed to execute
  OPERATION_STATUS_UNKNOWN = 5;  // The status of the operation is unknown
}

// A wrapper around an operation with its metadata
message OperationWrapper {
    // The unique ID of the operation.
    string id = 1;
    // The IDs of the blocks in which the operation appears
    repeated string block_ids = 3;
    // The thread in which the operation can be included
    fixed32 thread = 5;
    // The operation object itself
    SignedOperation operation = 6;
    // The execution statuses of the operation
    repeated OperationStatus status = 7;
}
