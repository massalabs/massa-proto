// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.api.v1;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";
import "massa/model/v1/address.proto";
import "massa/model/v1/block.proto";
import "massa/model/v1/commons.proto";
import "massa/model/v1/draw.proto";
import "massa/model/v1/endorsement.proto";
import "massa/model/v1/execution.proto";
import "massa/model/v1/node.proto";
import "massa/model/v1/operation.proto";
import "massa/model/v1/slot.proto";
import "massa/model/v1/versioning.proto";

option csharp_namespace = "Com.Massa.Api.v1";
option go_package = "github.com/massalabs/massa/api/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.api.v1";
option objc_class_prefix = "MAPI";
option php_namespace = "Com\\Massa\\Api\\V1";
option ruby_package = "Com::Massa::Api::V1";
option swift_prefix = "MAPI";

// Massa public gRPC service
service PublicService {
  // Get blocks by ids
  rpc GetBlocks(GetBlocksRequest) returns (GetBlocksResponse) {
    option (google.api.http) = {
      post: "/v1/get_blocks"
      body: "*"
    };
  }

  // Get datastore entries
  rpc GetDatastoreEntries(GetDatastoreEntriesRequest) returns (GetDatastoreEntriesResponse) {
    option (google.api.http) = {
      post: "/v1/get_datastore_entries"
      body: "*"
    };
  }

  // Get Mip status
  rpc GetMipStatus(GetMipStatusRequest) returns (GetMipStatusResponse) {
    option (google.api.http) = {
      post: "/v1/get_mip_status"
      body: "*"
    };
  }

  // Get next block best parents
  rpc GetNextBlockBestParents(GetNextBlockBestParentsRequest) returns (GetNextBlockBestParentsResponse) {
    option (google.api.http) = {
      post: "/v1/get_next_block_best_parents"
      body: "*"
    };
  }

  // Get operations
  rpc GetOperations(GetOperationsRequest) returns (GetOperationsResponse) {
    option (google.api.http) = {
      post: "/v1/get_operations"
      body: "*"
    };
  }

  // Get smart contracts execution events
  rpc GetScExecutionEvents(GetScExecutionEventsRequest) returns (GetScExecutionEventsResponse) {
    option (google.api.http) = {
      post: "/v1/get_sc_execution_events"
      body: "*"
    };
  }

  // Get selector draws
  rpc GetSelectorDraws(GetSelectorDrawsRequest) returns (GetSelectorDrawsResponse) {
    option (google.api.http) = {
      post: "/v1/get_selector_draws"
      body: "*"
    };
  }

  // Get stakers
  rpc GetStakers(GetStakersRequest) returns (GetStakersResponse) {
    option (google.api.http) = {
      post: "/v1/get_stakers"
      body: "*"
    };
  }

  // Get status
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {
    option (google.api.http) = {
      post: "/v1/get_status"
      body: "*"
    };
  }

  // Get transactions throughput
  rpc GetTransactionsThroughput(GetTransactionsThroughputRequest) returns (GetTransactionsThroughputResponse) {
    option (google.api.http) = {
      post: "/v1/transactions_throughput"
      body: "*"
    };
  }

  // Query state
  rpc QueryState(QueryStateRequest) returns (QueryStateResponse) {
    option (google.api.http) = {
      post: "/v1/query_state"
      body: "*"
    };
  }

  // ███████╗████████╗██████╗ ███████╗ █████╗ ███╗   ███╗
  // ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔══██╗████╗ ████║
  // ███████╗   ██║   ██████╔╝█████╗  ███████║██╔████╔██║
  // ╚════██║   ██║   ██╔══██╗██╔══╝  ██╔══██║██║╚██╔╝██║
  // ███████║   ██║   ██║  ██║███████╗██║  ██║██║ ╚═╝ ██║

  // New received and produced blocks
  rpc NewBlocks(stream NewBlocksRequest) returns (stream NewBlocksResponse) {}

  // New received and produced endorsements
  rpc NewEndorsements(stream NewEndorsementsRequest) returns (stream NewEndorsementsResponse) {}

  // New received and produced blocks with operations
  rpc NewFilledBlocks(stream NewFilledBlocksRequest) returns (stream NewFilledBlocksResponse) {}

  // New received and produced operations
  rpc NewOperations(stream NewOperationsRequest) returns (stream NewOperationsResponse) {}

  // New received and slot execution events
  rpc NewSlotExecutionOutputs(stream NewSlotExecutionOutputsRequest) returns (stream NewSlotExecutionOutputsResponse) {}

  // Send blocks
  rpc SendBlocks(stream SendBlocksRequest) returns (stream SendBlocksResponse) {}

  // Send endorsements
  rpc SendEndorsements(stream SendEndorsementsRequest) returns (stream SendEndorsementsResponse) {}

  // Send operations
  rpc SendOperations(stream SendOperationsRequest) returns (stream SendOperationsResponse) {}

  // Transactions throughput
  rpc TransactionsThroughput(stream TransactionsThroughputRequest) returns (stream TransactionsThroughputResponse) {}
}

// GetBlocksRequest holds request for GetBlocks
message GetBlocksRequest {
  // Filter
  GetBlocksFilter filter = 1;
}

// GetBlocks Filter
message GetBlocksFilter {
  // Block ids
  repeated string block_ids = 1;
  // Slots
  repeated massa.model.v1.Slots slots = 2;
}

// GetBlocksResponse holds response from GetBlocks
message GetBlocksResponse {
  // Blocks wrappers
  repeated massa.model.v1.BlockWrapper blocks = 1;
}

//TODO be inspected
// GetDatastoreEntriesRequest holds request from GetDatastoreEntries
message GetDatastoreEntriesRequest {
  // Filter
  DatastoreEntryFilter filter = 1;
}

// DatastoreEntryFilter
message DatastoreEntryFilter {
  // Datastore entries
  repeated DatastoreEntryFilterEntry entries = 1;
}

// DatastoreEntryFilterEntry
message DatastoreEntryFilterEntry {
  // Associated address of the entry
  string address = 1;
  // Datastore key
  bytes key = 2;
}

// GetDatastoreEntriesResponse holds response from GetDatastoreEntries
message GetDatastoreEntriesResponse {
  // Datastore entries
  repeated DatastoreEntry entries = 1;
}

// DatastoreEntry
message DatastoreEntry {
  // final datastore entry value
  bytes final_value = 1;
  // candidate_value datastore entry value
  bytes candidate_value = 2;
}

// GetMipStatusRequest holds request for GetMipStatus
message GetMipStatusRequest {}

// GetMipStatusResponse holds response from GetMipStatus
message GetMipStatusResponse {
  // MipInfo - status id entries
  repeated massa.model.v1.MipStatusEntry entries = 1;
}

// GetNextBlockBestParentsRequest holds request for GetNextBlockBestParents
message GetNextBlockBestParentsRequest {}

// GetNextBlockBestParentsResponse holds response from GetNextBlockBestParents
message GetNextBlockBestParentsResponse {
  // Best parents
  repeated BlockParent parents = 1;
}

// Block parent tuple
message BlockParent {
  // Block id
  string block_id = 1;
  // Period
  uint64 period = 2;
}

// GetOperationsRequest holds request for GetOperations
message GetOperationsRequest {
  // Filters
  GetOperationsFilter filter = 1;
}

// GetOperations Filter
message GetOperationsFilter {
  // Operation id
  repeated string operation_ids = 1;
  // Operation types
  repeated OpType operation_types = 2;
}

// GetOperationsResponse holds response from GetOperations
message GetOperationsResponse {
  //Operations wrappers
  repeated massa.model.v1.OperationWrapper operations = 1;
}

// GetScExecutionEventsRequest holds request for GetScExecutionEvents
message GetScExecutionEventsRequest {
  // Filter
  massa.model.v1.ScExecutionEventsFilter filter = 1;
}

// GetScExecutionEventsResponse holds response from GetScExecutionEvents
message GetScExecutionEventsResponse {
  //ScExecutionEvents
  repeated massa.model.v1.ScExecutionEvent events = 1;
}

// GetStatusRequest holds request from GetStatus
message GetStatusRequest {}

// GetStatusResponse holds request from GetStatus
message GetStatusResponse {
  // Status
  massa.model.v1.PublicStatus status = 1;
}

// GetSelectorDrawsRequest holds request from GetSelectorDraws
message GetSelectorDrawsRequest {
  // Filter
  SelectorDrawsFilter filter = 1;
}

// SelectorDraws Filter
message SelectorDrawsFilter {
  // Filter
  oneof filter {
    // Addresses
    massa.model.v1.Addresses addresses = 1;
    // Slot range
    massa.model.v1.SlotRange slot_range = 2;
  }
}

// GetSelectorDrawsResponse holds response from GetSelectorDraws
message GetSelectorDrawsResponse {
  // Selector draws
  repeated massa.model.v1.SlotDraw draws = 1;
}

// GetStakersRequest holds request from GetStakers
message GetStakersRequest {
  // Filter
  StakersFilter filter = 1;
}

// Stakers Filter
message StakersFilter {
  // Minimum rolls (Optional)
  google.protobuf.UInt64Value min_rolls = 1;
  // Maximum rolls (Optional)
  google.protobuf.UInt64Value max_rolls = 2;
  // Limit (Optional)
  google.protobuf.UInt64Value limit = 3;
}

// GetStakersResponse holds response from GetStakers
message GetStakersResponse {
  // Stakers
  repeated StakerEntry stakers = 1;
}

// StakerEntry
message StakerEntry {
  // Address
  string address = 1;
  // Rolls
  uint64 rolls = 2;
}

// GetTransactionsThroughputRequest holds request for GetTransactionsThroughput
message GetTransactionsThroughputRequest {}

// GetTransactionsThroughputResponse holds response from GetTransactionsThroughput
message GetTransactionsThroughputResponse {
  // Transactions throughput
  uint32 throughput = 1;
}

// Request to atomically execute a batch of execution state queries
message QueryStateRequest {
  // List of execution query request items
  repeated massa.model.v1.ExecutionQueryRequestItem requests = 1;
}

// Response to atomically execute a batch of execution state queries
message QueryStateResponse {
  // Final cursor position
  massa.model.v1.Slot final_cursor = 1;
  // Candidate cursor position
  massa.model.v1.Slot candidate_cursor = 2;
  // List of execution query response items
  repeated ExecutionQueryResponse responses = 3;
}

// Execution state query response
message ExecutionQueryResponse {
  // Result or error
  oneof response {
    // Execution query response item
    massa.model.v1.ExecutionQueryResponseItem result = 1;
    // gRPC error(status)
    google.rpc.Status error = 2;
  }
}

// NewBlocksRequest holds request for NewBlocks
message NewBlocksRequest {}

// NewBlocksResponse holds response from NewBlocks
message NewBlocksResponse {
  // Signed block
  massa.model.v1.SignedBlock block = 1;
}

// NewBlocksHeadersRequest holds request for NewBlocksHeaders
message NewBlocksHeadersRequest {}

// NewBlocksHeadersResponse holds response from NewBlocksHeaders
message NewBlocksHeadersResponse {
  // Signed block header
  massa.model.v1.SignedBlockHeader block_header = 1;
}

// NewEndorsementsRequest holds request for NewEndorsements
message NewEndorsementsRequest {}

// NewEndorsementsResponse holds response from NewEndorsements
message NewEndorsementsResponse {
  // Signed endorsement
  massa.model.v1.SignedEndorsement endorsement = 1;
}

// NewFilledBlocksRequest holds request for NewFilledBlocks
message NewFilledBlocksRequest {}

// NewFilledBlocksResponse holds response from NewFilledBlocks
message NewFilledBlocksResponse {
  // Block with operations content
  massa.model.v1.FilledBlock filled_block = 1;
}

// NewOperationsRequest holds request for NewOperations
message NewOperationsRequest {
  // Filter
  NewOperationsFilter filter = 1;
}

// NewOperations Filter
message NewOperationsFilter {
  // Operation type enum
  repeated OpType types = 1;
}

// Operation type enum
enum OpType {
  OP_TYPE_UNSPECIFIED = 0; // Default enum value
  OP_TYPE_TRANSACTION = 1; // Transaction
  OP_TYPE_ROLL_BUY = 2; // Roll buy
  OP_TYPE_ROLL_SELL = 3; // Roll sell
  OP_TYPE_EXECUTE_SC = 4; // Execute smart contract
  OP_TYPE_CALL_SC = 5; // Call smart contract
}

// NewOperationsResponse holds response from NewOperations
message NewOperationsResponse {
  // Signed operation
  massa.model.v1.SignedOperation operation = 1;
}

// NewSlotExecutionOutputsRequest holds request for NewSlotExecutionOutputs
message NewSlotExecutionOutputsRequest {
  // Filter
  NewSlotExecutionOutputsFilter filter = 1;
}

// NewSlotExecutionOutputs Filter
message NewSlotExecutionOutputsFilter {
  // Execution output status enum
  repeated massa.model.v1.ExecutionOutputStatus status = 1;
}

// NewSlotExecutionOutputsResponse holds response from NewSlotExecutionOutputs
message NewSlotExecutionOutputsResponse {
  // Slot execution output
  massa.model.v1.SlotExecutionOutput output = 1;
}

// SendBlocksRequest holds parameters to SendBlocks
message SendBlocksRequest {
  // Secure shared block
  massa.model.v1.SecureShare block = 1;
}

// SendBlocksResponse holds response from SendBlocks
message SendBlocksResponse {
  // Block result or a gRPC status
  oneof result {
    // Block result
    string block_id = 1;
    // gRPC error(status)
    google.rpc.Status error = 2;
  }
}

// SendEndorsementsRequest holds parameters to SendEndorsements
message SendEndorsementsRequest {
  // Secure shared endorsements
  repeated massa.model.v1.SecureShare endorsements = 1;
}

// SendEndorsementsResponse holds response from SendEndorsements
message SendEndorsementsResponse {
  // Endorsement result or gRPC status
  oneof result {
    // Endorsement result
    massa.model.v1.EndorsementsIds endorsements_ids = 1;
    // gRPC error(status)
    google.rpc.Status error = 2;
  }
}

// Holds Endorsement response
message EndorsementResult {
  // Endorsements ids
  repeated string endorsements_ids = 1;
}

// SendOperationsRequest holds parameters to SendOperations
message SendOperationsRequest {
  // Secured shared operations
  repeated massa.model.v1.SecureShare operations = 1;
}

// SendOperationsResponse holds response from SendOperations
message SendOperationsResponse {
  // Operation result or gRPC status
  oneof result {
    // Operation result
    massa.model.v1.OperationsIds operations_ids = 1;
    // gRPC error(status)
    google.rpc.Status error = 2;
  }
}

// TransactionsThroughputRequest holds request for TransactionsThroughput
message TransactionsThroughputRequest {
  // Timer interval in seconds (Optional). Defaults to 10s
  google.protobuf.UInt64Value interval = 1;
}

// TransactionsThroughputResponse holds response from TransactionsThroughput
message TransactionsThroughputResponse {
  // Transactions throughput per second
  uint32 throughput = 1;
}
