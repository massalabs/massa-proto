// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.api.v1;

import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";
import "massa/model/v1/address.proto";
import "massa/model/v1/amount.proto";
import "massa/model/v1/block.proto";
import "massa/model/v1/commons.proto";
import "massa/model/v1/datastore.proto";
import "massa/model/v1/denunciation.proto";
import "massa/model/v1/draw.proto";
import "massa/model/v1/endorsement.proto";
import "massa/model/v1/execution.proto";
import "massa/model/v1/node.proto";
import "massa/model/v1/operation.proto";
import "massa/model/v1/slot.proto";
import "massa/model/v1/staker.proto";

option csharp_namespace = "Com.Massa.Api.v1";
option go_package = "github.com/massalabs/massa/api/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.api.v1";
option objc_class_prefix = "MAPI";
option php_namespace = "Com\\Massa\\Api\\V1";
option ruby_package = "Com::Massa::Api::V1";
option swift_prefix = "MAPI";

// Massa public gRPC service
service PublicService {
  // Execute read only call
  rpc ExecuteReadOnlyCall(ExecuteReadOnlyCallRequest) returns (ExecuteReadOnlyCallResponse) {
    option (google.api.http) = {
      post: "/v1/execute_read_only_call"
      body: "*"
    };
  }

  // Get blocks by ids
  rpc GetBlocks(GetBlocksRequest) returns (GetBlocksResponse) {
    option (google.api.http) = {
      post: "/v1/get_blocks"
      body: "*"
    };
  }

  // Get datastore entries
  rpc GetDatastoreEntries(GetDatastoreEntriesRequest) returns (GetDatastoreEntriesResponse) {
    option (google.api.http) = {
      post: "/v1/get_datastore_entries"
      body: "*"
    };
  }

  // Get endorsements by ids
  rpc GetEndorsements(GetEndorsementsRequest) returns (GetEndorsementsResponse) {
    option (google.api.http) = {
      post: "/v1/get_endorsements"
      body: "*"
    };
  }

  // Get next block best parents
  rpc GetNextBlockBestParents(GetNextBlockBestParentsRequest) returns (GetNextBlockBestParentsResponse) {
    option (google.api.http) = {
      post: "/v1/get_next_block_best_parents"
      body: "*"
    };
  }

  // Get operations by ids
  rpc GetOperations(GetOperationsRequest) returns (GetOperationsResponse) {
    option (google.api.http) = {
      post: "/v1/get_operations"
      body: "*"
    };
  }

  // Get smart contracts execution events
  rpc GetScExecutionEvents(GetScExecutionEventsRequest) returns (GetScExecutionEventsResponse) {
    option (google.api.http) = {
      post: "/v1/get_sc_execution_events"
      body: "*"
    };
  }

  // Get selector draws
  rpc GetSelectorDraws(GetSelectorDrawsRequest) returns (GetSelectorDrawsResponse) {
    option (google.api.http) = {
      post: "/v1/get_selector_draws"
      body: "*"
    };
  }

  // Get stakers
  rpc GetStakers(GetStakersRequest) returns (GetStakersResponse) {
    option (google.api.http) = {
      post: "/v1/get_stakers"
      body: "*"
    };
  }

  // Get status
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {
    option (google.api.http) = {
      post: "/v1/get_status"
      body: "*"
    };
  }

  // Get transactions throughput
  rpc GetTransactionsThroughput(GetTransactionsThroughputRequest) returns (GetTransactionsThroughputResponse) {
    option (google.api.http) = {
      post: "/v1/transactions_throughput"
      body: "*"
    };
  }

  // Query state
  rpc QueryState(QueryStateRequest) returns (QueryStateResponse) {
    option (google.api.http) = {
      post: "/v1/query_state"
      body: "*"
    };
  }

  // Search blocks
  rpc SearchBlocks(SearchBlocksRequest) returns (SearchBlocksResponse) {
    option (google.api.http) = {
      post: "/v1/search_blocks"
      body: "*"
    };
  }

  // Search endorsements
  rpc SearchEndorsements(SearchEndorsementsRequest) returns (SearchEndorsementsResponse) {
    option (google.api.http) = {
      post: "/v1/search_endorsements"
      body: "*"
    };
  }

  // Search operations
  rpc SearchOperations(SearchOperationsRequest) returns (SearchOperationsResponse) {
    option (google.api.http) = {
      post: "/v1/search_operations"
      body: "*"
    };
  }

  // ███████╗████████╗██████╗ ███████╗ █████╗ ███╗   ███╗
  // ██╔════╝╚══██╔══╝██╔══██╗██╔════╝██╔══██╗████╗ ████║
  // ███████╗   ██║   ██████╔╝█████╗  ███████║██╔████╔██║
  // ╚════██║   ██║   ██╔══██╗██╔══╝  ██╔══██║██║╚██╔╝██║
  // ███████║   ██║   ██║  ██║███████╗██║  ██║██║ ╚═╝ ██║

  // New received and produced blocks
  rpc NewBlocks(stream NewBlocksRequest) returns (stream NewBlocksResponse) {}

  // New received and produced endorsements
  rpc NewEndorsements(stream NewEndorsementsRequest) returns (stream NewEndorsementsResponse) {}

  // New received and produced blocks with operations
  rpc NewFilledBlocks(stream NewFilledBlocksRequest) returns (stream NewFilledBlocksResponse) {}

  // New received and produced operations
  rpc NewOperations(stream NewOperationsRequest) returns (stream NewOperationsResponse) {}

  // New received and slot execution events
  rpc NewSlotExecutionOutputs(stream NewSlotExecutionOutputsRequest) returns (stream NewSlotExecutionOutputsResponse) {}

  // Send blocks
  rpc SendBlocks(stream SendBlocksRequest) returns (stream SendBlocksResponse) {}

  // Send endorsements
  rpc SendEndorsements(stream SendEndorsementsRequest) returns (stream SendEndorsementsResponse) {}

  // Send operations
  rpc SendOperations(stream SendOperationsRequest) returns (stream SendOperationsResponse) {}

  // Transactions throughput
  rpc TransactionsThroughput(stream TransactionsThroughputRequest) returns (stream TransactionsThroughputResponse) {}
}

// ExecuteReadOnlyCallRequest holds request for ExecuteReadOnlyCall
message ExecuteReadOnlyCallRequest {
  // Execution call
  massa.model.v1.ReadOnlyExecutionCall call = 1;
}

// ExecuteReadOnlyCallResponse holds response from ExecuteReadOnlyCall
message ExecuteReadOnlyCallResponse {
  // Execution output
  massa.model.v1.ReadOnlyExecutionOutput output = 1;
}

// GetBlocksRequest holds request for GetBlocks
message GetBlocksRequest {
  // Block ids
  repeated string block_ids = 1;
}

// GetBlocksResponse holds response from GetBlocks
message GetBlocksResponse {
  // Wrapped blocks
  repeated massa.model.v1.BlockWrapper wrapped_blocks = 1;
}

// GetDatastoreEntriesRequest holds request from GetDatastoreEntries
message GetDatastoreEntriesRequest {
  // Returns all the datastore entries that verify all the filters
  repeated GetDatastoreEntryFilter filters = 1;
}

// DatastoreEntryFilter
message GetDatastoreEntryFilter {
  // Filter
  oneof filter {
    // One of this (address-key) pairs
    massa.model.v1.AddressKeyEntry address_key = 1;
  }
}

// GetDatastoreEntriesResponse holds response from GetDatastoreEntries
message GetDatastoreEntriesResponse {
  // Datastore entries
  repeated massa.model.v1.DatastoreEntry datastore_entries = 1;
}

// GetEndorsementsRequest holds request for GetEndorsements
message GetEndorsementsRequest {
  // Endorsement ids
  repeated string endorsement_ids = 1;
}

// GetEndorsementsResponse holds response from GetEndorsements
message GetEndorsementsResponse {
  // Wrapped operations
  repeated massa.model.v1.EndorsementWrapper wrapped_endorsements = 1;
}

// GetNextBlockBestParentsRequest holds request for GetNextBlockBestParents
message GetNextBlockBestParentsRequest {}

// GetNextBlockBestParentsResponse holds response from GetNextBlockBestParents
message GetNextBlockBestParentsResponse {
  // Next block best parents
  repeated massa.model.v1.BlockParent block_parents = 1;
}

// GetOperationsRequest holds request for GetOperations
message GetOperationsRequest {
  // Operation ids
  repeated string operation_ids = 1;
}

// GetOperationsResponse holds response from GetOperations
message GetOperationsResponse {
  // Wrapped operations
  repeated massa.model.v1.OperationWrapper wrapped_operations = 1;
}

// GetScExecutionEventsRequest holds request for GetScExecutionEvents
message GetScExecutionEventsRequest {
  // Returns all the sc execution events that verify all the filters
  repeated ScExecutionEventsFilter filters = 1;
}

// ScExecutionEvents Filter
message ScExecutionEventsFilter {
  // Filter
  oneof filter {
    // Slot range
    massa.model.v1.SlotRange slot_range = 1;
    // Caller address
    string caller_address = 2;
    // Emitter address
    string emitter_address = 3;
    // Original operation id
    string original_operation_id = 4;
    // Whether the event is a failure
    bool is_failure = 5;
    // Status
    massa.model.v1.ScExecutionEventStatus status = 6;
  }
}

// GetScExecutionEventsResponse holds response from GetScExecutionEvents
message GetScExecutionEventsResponse {
  // ScExecutionEvents
  repeated massa.model.v1.ScExecutionEvent events = 1;
}

// GetStatusRequest holds request from GetStatus
message GetStatusRequest {}

// GetStatusResponse holds request from GetStatus
message GetStatusResponse {
  // Status
  massa.model.v1.PublicStatus status = 1;
}

// GetSelectorDrawsRequest holds request from GetSelectorDraws
message GetSelectorDrawsRequest {
  // Returns all the selector draws that verify all the filters
  repeated SelectorDrawsFilter filters = 1;
}

// SelectorDraws Filter
message SelectorDrawsFilter {
  // Returns all the selector draws that verify all the filters
  oneof filter {
    // One of the Addresses
    massa.model.v1.Addresses addresses = 1;
    // One of the Slot range
    massa.model.v1.SlotRange slot_range = 2;
  }
}

// GetSelectorDrawsResponse holds response from GetSelectorDraws
message GetSelectorDrawsResponse {
  // Selector draws
  repeated massa.model.v1.SlotDraw draws = 1;
}

// GetStakersRequest holds request from GetStakers
message GetStakersRequest {
  // Returns all the stakers that verify all the filters
  repeated StakersFilter filters = 1;
}

// Stakers Filter
message StakersFilter {
  // Returns all the stakers that verify all the filters
  oneof filter {
    // Minimum rolls
    uint64 min_rolls = 1;
    // Maximum rolls
    uint64 max_rolls = 2;
    // Limit
    uint64 limit = 3;
  }
}

// GetStakersResponse holds response from GetStakers
message GetStakersResponse {
  // Stakers
  repeated massa.model.v1.StakerEntry stakers = 1;
}

// GetTransactionsThroughputRequest holds request for GetTransactionsThroughput
message GetTransactionsThroughputRequest {}

// GetTransactionsThroughputResponse holds response from GetTransactionsThroughput
message GetTransactionsThroughputResponse {
  // Transactions throughput
  uint32 throughput = 1;
}

// Request to atomically execute a batch of execution state queries
message QueryStateRequest {
  // Execution queries
  repeated ExecutionQueryRequestItem queries = 1;
}

// Query state query item
message ExecutionQueryRequestItem {
  oneof request_item {
    // Checks if address exists (candidate)
    AddressExistsCandidate address_exists_candidate = 1;
    // Checks if address exists (final)
    AddressExistsFinal address_exists_final = 2;
    // Gets the balance (candidate) of an address
    AddressBalanceCandidate address_balance_candidate = 3;
    // Gets the balance (final) of an address
    AddressBalanceFinal address_balance_final = 4;
    // Gets the bytecode (candidate) of an address
    AddressBytecodeCandidate address_bytecode_candidate = 5;
    // Gets the bytecode (final) of an address
    AddressBytecodeFinal address_bytecode_final = 6;
    // Gets the datastore keys (candidate) of an address
    AddressDatastoreKeysCandidate address_datastore_keys_candidate = 7;
    // Gets the datastore keys (final) of an address
    AddressDatastoreKeysFinal address_datastore_keys_final = 8;
    // Gets a datastore value (candidate) for an address
    AddressDatastoreValueCandidate address_datastore_value_candidate = 9;
    // Gets a datastore value (final) for an address
    AddressDatastoreValueFinal address_datastore_value_final = 10;
    // Gets the execution status (candidate) for an operation
    OpExecutionStatusCandidate op_execution_status_candidate = 11;
    // Gets the execution status (final) for an operation
    OpExecutionStatusFinal op_execution_status_final = 12;
    // Gets the execution status (candidate) for a denunciation
    DenunciationExecutionStatusCandidate denunciation_execution_status_candidate = 13;
    // Gets the execution status (final) for a denunciation
    DenunciationExecutionStatusFinal denunciation_execution_status_final = 14;
    // Gets the roll count (candidate) of an address
    AddressRollsCandidate address_rolls_candidate = 15;
    // Gets the roll count (final) of an address
    AddressRollsFinal address_rolls_final = 16;
    // Gets the deferred credits (candidate) of an address
    AddressDeferredCreditsCandidate address_deferred_credits_candidate = 17;
    // Gets the deferred credits (final) of an address
    AddressDeferredCreditsFinal address_deferred_credits_final = 18;
    // Gets all information for a given cycle
    CycleInfos cycle_infos = 19;
    // Gets filtered events
    Events events = 20;
  }
}

// Request to check if address exists (candidate)
message AddressExistsCandidate {
  // Address to check
  string address = 1;
}

// Request to check if address exists (final)
message AddressExistsFinal {
  // Address to check
  string address = 1;
}

// Request to get the balance (candidate) of an address
message AddressBalanceCandidate {
  // Address to query
  string address = 1;
}

// Request to get the balance (final) of an address
message AddressBalanceFinal {
  // Address to query
  string address = 1;
}

// Request to get the bytecode (candidate) of an address
message AddressBytecodeCandidate {
  // Address to query
  string address = 1;
}

// Request to get the bytecode (final) of an address
message AddressBytecodeFinal {
  // Address to query
  string address = 1;
}

// Request to get the datastore keys (candidate) of an address
message AddressDatastoreKeysCandidate {
  // Address to query
  string address = 1;
  // Prefix for the keys
  bytes prefix = 2;
}

// Request to get the datastore keys (final) of an address
message AddressDatastoreKeysFinal {
  // Address to query
  string address = 1;
  // Prefix for the keys
  bytes prefix = 2;
}

// Request to get a datastore value (candidate) for an address
message AddressDatastoreValueCandidate {
  // Address to query
  string address = 1;
  // Key for the value
  bytes key = 2;
}

// Request to get a datastore value (final) for an address
message AddressDatastoreValueFinal {
  // Address to query
  string address = 1;
  // Key for the value
  bytes key = 2;
}

// Request to get the execution status (candidate) for an operation
message OpExecutionStatusCandidate {
  // Operation ID to query
  string operation_id = 1;
}

// Request to get the execution status (final) for an operation
message OpExecutionStatusFinal {
  // Operation ID to query
  string operation_id = 1;
}

// Request to get the execution status (candidate) for a denunciation
message DenunciationExecutionStatusCandidate {
  // Denunciation index to query
  massa.model.v1.DenunciationIndex denunciation_index = 1;
}

// Request to get the execution status (final) for a denunciation
message DenunciationExecutionStatusFinal {
  // Denunciation index to query
  massa.model.v1.DenunciationIndex denunciation_index = 1;
}

// Request to get the roll count (candidate) of an address
message AddressRollsCandidate {
  // Address to query
  string address = 1;
}

// Request to get the roll count (final) of an address
message AddressRollsFinal {
  // Address to query
  string address = 1;
}

// Request to get the deferred credits (candidate) of an address
message AddressDeferredCreditsCandidate {
  // Address to query
  string address = 1;
}

// Request to get the deferred credits (final) of an address
message AddressDeferredCreditsFinal {
  // Address to query
  string address = 1;
}

// Request to get all information for a given cycle
message CycleInfos {
  // Cycle to query
  uint64 cycle = 1;
  // Addresses to restrict the query (if None, info for all addresses will be returned)
  repeated string restrict_to_addresses = 2;
}

// Request to get filtered events
message Events {
  // Returns all the events that verify all the filters
  repeated ScExecutionEventsFilter filters = 1;
}

// Response to atomically execute a batch of execution state queries
message QueryStateResponse {
  // Final cursor position
  massa.model.v1.Slot final_cursor = 1;
  // Candidate cursor position
  massa.model.v1.Slot candidate_cursor = 2;
  // The hash of the XOF final state hash
  string final_state_fingerprint = 3;
  // List of execution query response items
  repeated ExecutionQueryResponse responses = 4;
}

// Execution state query response
message ExecutionQueryResponse {
  // Result or error
  oneof response {
    // Execution query response item
    ExecutionQueryResponseItem result = 1;
    // Massa error
    massa.model.v1.Error error = 2;
  }
}

// Execution state query response item
message ExecutionQueryResponseItem {
  oneof response_item {
    // Boolean value
    bool boolean = 1;
    // Roll counts value
    uint64 roll_count = 2;
    // Amount value
    massa.model.v1.NativeAmount amount = 3;
    // Bytes value
    bytes bytes = 4;
    // Vector of bytes value
    massa.model.v1.ArrayOfBytesWrapper vec_bytes = 5;
    // Deferred credits value
    DeferredCreditsEntryWrapper deferred_credits = 6;
    // Execution status value
    ExecutionQueryExecutionStatus execution_status = 7;
    // Cycle infos value
    ExecutionQueryCycleInfos cycle_infos = 8;
    // Events
    ScOutputEventsWrapper events = 9;
  }
}

// Deferred credits entry wrapper
message DeferredCreditsEntryWrapper {
  // Deferred credits entry
  repeated DeferredCreditsEntry entries = 1;
}

// Deferred credits entry
message DeferredCreditsEntry {
  // Slot
  massa.model.v1.Slot slot = 1;
  // Amount
  massa.model.v1.NativeAmount amount = 2;
}

// Execution status of an operation or denunciation
enum ExecutionQueryExecutionStatus {
  EXECUTION_QUERY_EXECUTION_STATUS_UNSPECIFIED = 0; // Default enum value
  EXECUTION_QUERY_EXECUTION_STATUS_ALREADY_EXECUTED_WITH_SUCCESS = 1; // The operation or denunciation was executed recently with success
  EXECUTION_QUERY_EXECUTION_STATUS_ALREADY_EXECUTED_WITH_FAILURE = 2; // The operation or denunciation was executed recently with failure
  EXECUTION_QUERY_EXECUTION_STATUS_EXECUTABLE_OR_EXPIRED = 3; // The operation or denunciation was not executed recently but can still be executed unless expired
}

// Cycle information for execution query
message ExecutionQueryCycleInfos {
  // Cycle number
  uint64 cycle = 1;
  // Whether the cycle is final
  bool is_final = 2;
  // Infos for each PoS-participating address among the ones that were asked
  repeated ExecutionQueryStakerInfoEntry staker_infos = 3;
}

// Staker information for a given cycle
message ExecutionQueryStakerInfoEntry {
  // Address of the staker
  string address = 1;
  // Staker info
  ExecutionQueryStakerInfo info = 2;
}

// Staker information for execution query
message ExecutionQueryStakerInfo {
  // Active roll count
  uint64 active_rolls = 1;
  // Production stats
  ExecutionQueryStakerInfoProductionStatsEntry production_stats = 2;
}

// ExecutionQueryStakerInfoProductionStats entry
message ExecutionQueryStakerInfoProductionStatsEntry {
  // Address of the staker
  string address = 1;
  // Production failure
  ExecutionQueryStakerInfoProductionStats stats = 2;
}

// Production statistics for staker info in execution query
message ExecutionQueryStakerInfoProductionStats {
  // Production successes
  uint64 block_success_count = 1;
  // Production failures
  uint64 block_failure_count = 2;
}

// ScOutputEvents wrapper
message ScOutputEventsWrapper {
  // Events
  repeated massa.model.v1.ScExecutionEvent events = 1;
}

// NewBlocksRequest holds request for NewBlocks
message NewBlocksRequest {}

// NewBlocksResponse holds response from NewBlocks
message NewBlocksResponse {
  // Signed block
  massa.model.v1.SignedBlock signed_block = 1;
}

// NewBlocksHeadersRequest holds request for NewBlocksHeaders
message NewBlocksHeadersRequest {}

// NewBlocksHeadersResponse holds response from NewBlocksHeaders
message NewBlocksHeadersResponse {
  // Signed block header
  massa.model.v1.SignedBlockHeader signed_block_header = 1;
}

// NewEndorsementsRequest holds request for NewEndorsements
message NewEndorsementsRequest {}

// NewEndorsementsResponse holds response from NewEndorsements
message NewEndorsementsResponse {
  // Signed endorsement
  massa.model.v1.SignedEndorsement signed_endorsement = 1;
}

// NewFilledBlocksRequest holds request for NewFilledBlocks
message NewFilledBlocksRequest {}

// NewFilledBlocksResponse holds response from NewFilledBlocks
message NewFilledBlocksResponse {
  // Block with operations content found in the node.
  massa.model.v1.FilledBlock filled_block = 1;
}

// NewOperationsRequest holds request for NewOperations
message NewOperationsRequest {
  // Returns all the operations that verify all the filters
  repeated NewOperationsFilter filters = 1;
}

// NewOperations Filter
message NewOperationsFilter {
  // Filter
  massa.model.v1.OpTypes operation_types = 2;
}

// NewOperationsResponse holds response from NewOperations
message NewOperationsResponse {
  // Signed operation
  massa.model.v1.SignedOperation signed_operation = 1;
}

// NewSlotExecutionOutputsRequest holds request for NewSlotExecutionOutputs
message NewSlotExecutionOutputsRequest {
  // Returns all the slot execution outputs that verify all the filters
  repeated NewSlotExecutionOutputsFilter filters = 1;
}

// NewSlotExecutionOutputs Filter
message NewSlotExecutionOutputsFilter {
  // Filter
  oneof filter {
    // Execution output status
    massa.model.v1.ExecutionOutputStatus status = 1;
  }
}

// NewSlotExecutionOutputsResponse holds response from NewSlotExecutionOutputs
message NewSlotExecutionOutputsResponse {
  // Slot execution output
  massa.model.v1.SlotExecutionOutput output = 1;
}

// SendBlocksRequest holds parameters to SendBlocks
message SendBlocksRequest {
  // Secure shared block
  massa.model.v1.SecureShare block = 1;
}

// SendBlocksResponse holds response from SendBlocks
message SendBlocksResponse {
  // Block result or a gRPC status
  oneof result {
    // Block result
    string block_id = 1;
    // Massa error
    massa.model.v1.Error error = 2;
  }
}

// SendEndorsementsRequest holds parameters to SendEndorsements
message SendEndorsementsRequest {
  // Secure shared endorsements
  repeated massa.model.v1.SecureShare endorsements = 1;
}

// SendEndorsementsResponse holds response from SendEndorsements
message SendEndorsementsResponse {
  // Endorsement result or gRPC status
  oneof result {
    // Endorsement result
    massa.model.v1.EndorsementIds endorsement_ids = 1;
    // Massa error
    massa.model.v1.Error error = 2;
  }
}

// SendOperationsRequest holds parameters to SendOperations
message SendOperationsRequest {
  // Secured shared operations
  repeated massa.model.v1.SecureShare operations = 1;
}

// SendOperationsResponse holds response from SendOperations
message SendOperationsResponse {
  // Operation result or gRPC status
  oneof result {
    // Operation result
    massa.model.v1.OperationIds operation_ids = 1;
    // Massa error
    massa.model.v1.Error error = 2;
  }
}

// TransactionsThroughputRequest holds request for TransactionsThroughput
message TransactionsThroughputRequest {
  // Timer interval in seconds (Optional). Defaults to 10s
  google.protobuf.UInt64Value interval = 1;
}

// TransactionsThroughputResponse holds response from TransactionsThroughput
message TransactionsThroughputResponse {
  // Transactions throughput per second
  uint32 throughput = 1;
}

// SearchBlocksRequest holds request for SearchBlocks
message SearchBlocksRequest {
  // Returns all the blocks that verify all the filters
  repeated SearchBlocksFilter filters = 1;
}

// SearchBlocks Filter
message SearchBlocksFilter {
  // Filter
  oneof filter {
    // One of this block ids
    massa.model.v1.BlockIds block_ids = 1;
    // One of this creator addresses
    massa.model.v1.Addresses addresses = 2;
    // One of this slot ranges (inclusive)
    massa.model.v1.SlotRange slot_range = 3;
  }
}

// SearchBlocksResponse holds response from SearchBlocks
message SearchBlocksResponse {
  // Information about the blocks
  repeated massa.model.v1.BlockInfo block_infos = 1;
}

// SearchEndorsementsRequest holds request for SearchEndorsements
message SearchEndorsementsRequest {
  // Returns all the endorsements informations that verify all the filters
  repeated SearchEndorsementsFilter filters = 1;
}

// SearchEndorsements Filter
message SearchEndorsementsFilter {
  // Filter
  oneof filter {
    // One of this endorsement ids
    massa.model.v1.EndorsementIds endorsement_ids = 1;
    // One of this creator addresses
    massa.model.v1.Addresses addresses = 2;
    // One of this block ids
    massa.model.v1.BlockIds block_ids = 3;
  }
}

// SearchEndorsementsResponse holds response from SearchEndorsements
message SearchEndorsementsResponse {
  // Information about the endorsements
  repeated massa.model.v1.EndorsementInfo endorsement_infos = 1;
}

// SearchOperationsRequest holds request for SearchOperations
message SearchOperationsRequest {
  // Returns all the operations that verify all the filters
  repeated SearchOperationsFilter filters = 1;
}

// SearchOperations Filter
message SearchOperationsFilter {
  // Filter
  oneof filter {
    // One of the operation ids
    massa.model.v1.OperationIds operation_ids = 1;
    // One of the operation types
    massa.model.v1.OpTypes operation_types = 2;
  }
}

// SearchOperationsResponse holds response from SearchOperations
message SearchOperationsResponse {
  // Information about the operations
  repeated massa.model.v1.OperationInfo operation_infos = 1;
}
