// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.api.v1;

import "google/api/annotations.proto";

option csharp_namespace = "Com.Massa.Api.v1";
option go_package = "github.com/massalabs/massa/api/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.api.v1";
option objc_class_prefix = "MAPI";
option php_namespace = "Com\\Massa\\Api\\V1";
option ruby_package = "Com::Massa::Api::V1";
option swift_prefix = "MAPI";

// Massa private gRPC service
service MassaPrivateService {
  // Add staking secret keys to wallet
  rpc AddStakingSecretKeys(AddStakingSecretKeysRequest) returns (AddStakingSecretKeysResponse) {
    option (google.api.http) = {
      post: "/v1/add_staking_secret_keys"
      body: "*"
    };
  }

  // Remove addresses from staking
  rpc RemoveStakingAddresses(RemoveStakingAddressesRequest) returns (RemoveStakingAddressesResponse) {
    option (google.api.http) = {
      post: "/v1/remove_staking_addresses"
      body: "*"
    };
  }

  // Sign messages with node's key
  rpc SignMessages(SignMessagesRequest) returns (SignMessagesResponse) {
    option (google.api.http) = {
      post: "/v1/sign_messages"
      body: "*"
    };
  }

  // Shutdown the node
  rpc ShutdownNode(ShutdownNodeRequest) returns (ShutdownNodeResponse) {
    option (google.api.http) = {get: "/v1/shutdown_node"};
  }
}

// AddStakingSecretKeysRequest holds the request for AddStakingSecretKeys
message AddStakingSecretKeysRequest {
  // Secret keys to add to wallet
  repeated string secret_keys = 1;
}

// AddStakingSecretKeysResponse holds the response from AddStakingSecretKeys
message AddStakingSecretKeysResponse {}

// RemoveStakingAddressesRequest holds the request for RemoveStakingAddresses
message RemoveStakingAddressesRequest {
  // Addresses to remove from staking
  repeated string addresses = 1;
}

// RemoveStakingAddressesResponse holds the response from RemoveStakingAddresses
message RemoveStakingAddressesResponse {}

// SignMessagesRequest holds the request for SignMessages
message SignMessagesRequest {
  // Request id
  string id = 1;
  // Messages to sign in bytes
  repeated bytes messages = 2;
}

// SignMessagesResponse holds the response from SignMessages
message SignMessagesResponse {
  // Public key that signed the message
  string public_key = 1;
  // Signatures
  repeated string signatures = 2;
}

// ShutdownNodeRequest holds the request for ShutdownNode
message ShutdownNodeRequest {}

// ShutdownNodeResponse holds the response from ShutdownNode
message ShutdownNodeResponse {}
