// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.api.v1;

import "google/api/annotations.proto";
import "massa/model/v1/node.proto";
import "massa/model/v1/versioning.proto";

option csharp_namespace = "Com.Massa.Api.v1";
option go_package = "github.com/massalabs/massa/api/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.api.v1";
option objc_class_prefix = "MAPI";
option php_namespace = "Com\\Massa\\Api\\V1";
option ruby_package = "Com::Massa::Api::V1";
option swift_prefix = "MAPI";

// Massa private gRPC service
service PrivateService {
  // Add IP addresses to node bootstrap blacklist
  rpc AddToBootstrapBlacklist(AddToBootstrapBlacklistRequest) returns (AddToBootstrapBlacklistResponse) {
    option (google.api.http) = {
      post: "/v1/add_to_boostrap_blacklist"
      body: "*"
    };
  }

  // Add IP addresses to node bootstrap whitelist
  rpc AddToBootstrapWhitelist(AddToBootstrapWhitelistRequest) returns (AddToBootstrapWhitelistResponse) {
    option (google.api.http) = {
      post: "/v1/add_to_boostrap_whitelist"
      body: "*"
    };
  }

  // Add IP addresses to node peers whitelist. No confirmation to expect.
  // Note: If the ip was unknown it adds it to the known peers, otherwise it updates the peer type
  rpc AddToPeersWhitelist(AddToPeersWhitelistRequest) returns (AddToPeersWhitelistResponse) {
    option (google.api.http) = {
      post: "/v1/add_to_peers_whitelist"
      body: "*"
    };
  }

  // Add staking secret keys to wallet
  rpc AddStakingSecretKeys(AddStakingSecretKeysRequest) returns (AddStakingSecretKeysResponse) {
    option (google.api.http) = {
      post: "/v1/add_staking_secret_keys"
      body: "*"
    };
  }

  // Allow everyone to bootstrap from the node by removing bootstrap whitelist configuration file
  rpc AllowEveryoneToBootstrap(AllowEveryoneToBootstrapRequest) returns (AllowEveryoneToBootstrapResponse) {
    option (google.api.http) = {
      post: "/v1/allow_everyone_to_bootstrap"
      body: "*"
    };
  }

  // Get node bootstrap blacklist IP addresses
  rpc GetBootstrapBlacklist(GetBootstrapBlacklistRequest) returns (GetBootstrapBlacklistResponse) {
    option (google.api.http) = {
      post: "/v1/get_bootstrap_blacklist"
      body: "*"
    };
  }

  // Get node bootstrap whitelist IP addresses
  rpc GetBootstrapWhitelist(GetBootstrapWhitelistRequest) returns (GetBootstrapWhitelistResponse) {
    option (google.api.http) = {
      post: "/v1/get_bootstrap_whitelist"
      body: "*"
    };
  }

  // Get Mip status
  rpc GetMipStatus(GetMipStatusRequest) returns (GetMipStatusResponse) {
    option (google.api.http) = {
      post: "/v1/get_mip_status"
      body: "*"
    };
  }

  // Get node status
  rpc GetNodeStatus(GetNodeStatusRequest) returns (GetNodeStatusResponse) {
    option (google.api.http) = {
      post: "/v1/get_node_status"
      body: "*"
    };
  }

  // Get node peers whitelist IP addresses
  rpc GetPeersWhitelist(GetPeersWhitelistRequest) returns (GetPeersWhitelistResponse) {
    option (google.api.http) = {
      post: "/v1/get_peers_whitelist"
      body: "*"
    };
  }

  // Ban multiple nodes by their individual ids
  rpc BanNodesByIds(BanNodesByIdsRequest) returns (BanNodesByIdsResponse) {
    option (google.api.http) = {
      post: "/v1/ban_nodes_by_ids"
      body: "*"
    };
  }

  // Ban multiple nodes by their individual IP addresses
  rpc BanNodesByIps(BanNodesByIpsRequest) returns (BanNodesByIpsResponse) {
    option (google.api.http) = {
      post: "/v1/ban_nodes_by_ips"
      body: "*"
    };
  }

  // Remove from bootstrap blacklist given IP addresses
  rpc RemoveFromBootstrapBlacklist(RemoveFromBootstrapBlacklistRequest) returns (RemoveFromBootstrapBlacklistResponse) {
    option (google.api.http) = {
      post: "/v1/remove_from_bootstrap_blacklist"
      body: "*"
    };
  }

  // Remove from bootstrap whitelist given IP addresses
  rpc RemoveFromBootstrapWhitelist(RemoveFromBootstrapWhitelistRequest) returns (RemoveFromBootstrapWhitelistResponse) {
    option (google.api.http) = {
      post: "/v1/remove_from_bootstrap_whitelist"
      body: "*"
    };
  }

  // Remove from peers whitelist given IP addresses
  rpc RemoveFromPeersWhitelist(RemoveFromPeersWhitelistRequest) returns (RemoveFromPeersWhitelistResponse) {
    option (google.api.http) = {
      post: "/v1/remove_from_peers_whitelist"
      body: "*"
    };
  }

  // Remove addresses from staking
  rpc RemoveStakingAddresses(RemoveStakingAddressesRequest) returns (RemoveStakingAddressesResponse) {
    option (google.api.http) = {
      post: "/v1/remove_staking_addresses"
      body: "*"
    };
  }

  // Sign messages with node's key
  rpc SignMessages(SignMessagesRequest) returns (SignMessagesResponse) {
    option (google.api.http) = {
      post: "/v1/sign_messages"
      body: "*"
    };
  }

  // Shutdown the node gracefully
  rpc ShutdownGracefully(ShutdownGracefullyRequest) returns (ShutdownGracefullyResponse) {
    option (google.api.http) = {
      post: "/v1/shutdown_gracefully"
      body: "*"
    };
  }

  // Unban multiple nodes by their individual ids
  rpc UnbanNodesByIds(UnbanNodesByIdsRequest) returns (UnbanNodesByIdsResponse) {
    option (google.api.http) = {
      post: "/v1/unban_nodes_by_ids"
      body: "*"
    };
  }

  // Unban multiple nodes by their individual IP addresses
  rpc UnbanNodesByIps(UnbanNodesByIpsRequest) returns (UnbanNodesByIpsResponse) {
    option (google.api.http) = {
      post: "/v1/unban_nodes_by_ips"
      body: "*"
    };
  }
}

// AddToBootstrapBlacklistRequest holds the request for AddToBootstrapBlacklist
message AddToBootstrapBlacklistRequest {
  // IP addresses to add to bootstrap blacklist
  repeated string ips = 1;
}

// AddToBootstrapBlacklistResponse holds the response from AddToBootstrapBlacklist
message AddToBootstrapBlacklistResponse {}

// AddToBootstrapWhitelistRequest holds the request for AddToBootstrapWhitelist
message AddToBootstrapWhitelistRequest {
  // IP addresses to add to bootstrap whitelist
  repeated string ips = 1;
}

// AddToBootstrapWhitelistResponse holds the response from AddToBootstrapWhitelist
message AddToBootstrapWhitelistResponse {}

// AddToPeersWhitelistRequest holds the request for AddToPeersWhitelist
message AddToPeersWhitelistRequest {
  // IP addresses to add to peers whitelist
  repeated string ips = 1;
}

// AddToPeersWhitelistResponse holds the response from AddToPeersWhitelist
message AddToPeersWhitelistResponse {}

// AddStakingSecretKeysRequest holds the request for AddStakingSecretKeys
message AddStakingSecretKeysRequest {
  // Secret keys to add to wallet
  repeated string secret_keys = 1;
}

// AddStakingSecretKeysResponse holds the response from AddStakingSecretKeys
message AddStakingSecretKeysResponse {}

// AllowEveryoneToBootstrapRequest holds the request for AllowEveryoneToBootstrap
message AllowEveryoneToBootstrapRequest {}

// AllowEveryoneToBootstrapResponse holds the response from AllowEveryoneToBootstrap
message AllowEveryoneToBootstrapResponse {}

// GetBootstrapBlacklistRequest holds the request for GetBootstrapBlacklist
message GetBootstrapBlacklistRequest {}

// GetBootstrapBlacklistResponse holds the response from GetBootstrapBlacklist
message GetBootstrapBlacklistResponse {
  // Bootstrap blacklisted IP addresses
  repeated string ips = 1;
}

// GetBootstrapWhitelistRequest holds the request for GetBootstrapWhitelist
message GetBootstrapWhitelistRequest {}

// GetBootstrapWhitelistResponse holds the response from GetBootstrapWhitelist
message GetBootstrapWhitelistResponse {
  // Bootstrap whitelisted IP addresses
  repeated string ips = 1;
}

// GetMipStatusRequest holds request for GetMipStatus
message GetMipStatusRequest {}

// GetMipStatusResponse holds response from GetMipStatus
message GetMipStatusResponse {
  // (MipInfo - status id) entries
  repeated massa.model.v1.MipStatusEntry mipstatus_entries = 1;
}

// GetNodeStatusRequest holds the request for GetNodeStatus
message GetNodeStatusRequest {}

// GetNodeStatusResponse holds the response from GetNodeStatus
message GetNodeStatusResponse {
  // Node status
  massa.model.v1.NodeStatus status = 1;
}

// GetPeersWhitelistRequest holds the request for GetPeersWhitelist
message GetPeersWhitelistRequest {}

// GetPeersWhitelistResponse holds the response from GetPeersWhitelist
message GetPeersWhitelistResponse {
  // Whitelisted IP addresses
  repeated string ips = 1;
}

// BanNodesByIdsRequest holds the request for BanNodesByIds
message BanNodesByIdsRequest {
  // Node ids to ban
  repeated string node_ids = 1;
}

// BanNodesByIdsResponse holds the response from BanNodesByIds
message BanNodesByIdsResponse {}

// BanNodesByIpsRequest holds the request for BanNodesByIps
message BanNodesByIpsRequest {
  // Node IP addresses to ban
  repeated string ips = 1;
}

// BanNodesByIpsResponse holds the response from BanNodesByIps
message BanNodesByIpsResponse {}

// RemoveFromBootstrapBlacklistRequest holds the request for RemoveFromBootstrapBlacklist
message RemoveFromBootstrapBlacklistRequest {
  // IP addresses to remove from bootstrap blacklist
  repeated string ips = 1;
}

// RemoveFromBootstrapBlacklistResponse holds the response from RemoveFromBootstrapBlacklist
message RemoveFromBootstrapBlacklistResponse {}

// RemoveFromBootstrapWhitelistRequest holds the request for RemoveFromBootstrapWhitelist
message RemoveFromBootstrapWhitelistRequest {
  // IP addresses to remove from bootstrap whitelist
  repeated string ips = 1;
}

// RemoveFromBootstrapWhitelistResponse holds the response from RemoveFromBootstrapWhitelist
message RemoveFromBootstrapWhitelistResponse {}

// RemoveFromPeersWhitelistRequest holds the request for RemoveFromPeersWhitelist
message RemoveFromPeersWhitelistRequest {
  // IP addresses to remove from peers whitelist
  repeated string ips = 1;
}

// RemoveFromPeersWhitelistResponse holds the response from RemoveFromPeersWhitelist
message RemoveFromPeersWhitelistResponse {}

// RemoveStakingAddressesRequest holds the request for RemoveStakingAddresses
message RemoveStakingAddressesRequest {
  // Addresses to remove from staking
  repeated string addresses = 1;
}

// RemoveStakingAddressesResponse holds the response from RemoveStakingAddresses
message RemoveStakingAddressesResponse {}

// SignMessagesRequest holds the request for SignMessages
message SignMessagesRequest {
  // Messages to sign in bytes
  repeated bytes messages = 1;
}

// SignMessagesResponse holds the response from SignMessages
message SignMessagesResponse {
  // Public key that signed the message
  string public_key = 1;
  // Signatures
  repeated string signatures = 3;
}

// ShutdownGracefullyRequest holds the request for ShutdownGracefully
message ShutdownGracefullyRequest {}

// ShutdownGracefullyResponse holds the response from ShutdownGracefully
message ShutdownGracefullyResponse {}

// UnbanNodesByIdsRequest holds the request for UnbanNodesByIds
message UnbanNodesByIdsRequest {
  // Node ids to unban
  repeated string node_ids = 1;
}

// UnbanNodesByIdsResponse holds the response from UnbanNodesByIds
message UnbanNodesByIdsResponse {}

// UnbanNodesByIpsRequest holds the request for UnbanNodesByIps
message UnbanNodesByIpsRequest {
  // Nodes IP addresses to unban
  repeated string ips = 1;
}

// UnbanNodesByIpsResponse holds the response from UnbanNodesByIps
message UnbanNodesByIpsResponse {}
