// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.abi.v1;

import "massa/model/v1/address.proto";
import "massa/model/v1/amount.proto";
import "massa/model/v1/hash.proto";
import "massa/model/v1/signature.proto";
import "massa/model/v1/time.proto";

option csharp_namespace = "Com.Massa.Abi.V1";
option go_package = "github.com/massalabs/massa/abi/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.abi.v1";
option objc_class_prefix = "MABI";
option php_namespace = "Com\\Massa\\Abi\\V1";
option ruby_package = "Com::Massa::Abi::V1";
option swift_prefix = "MABI";

// Error message used in abi Response
message Error {
  // a string representing the error
  string message = 1;
}

message CreateSCRequest {
  // Bytecode is the compiled code of the smart contract
  bytes bytecode = 1;
}

message CreateSCResponse {
  // Address of the just created smart contract
  massa.model.v1.NativeAddress sc_address = 1;
}

// CallSC
message CallRequest {
  // Address of the smart contract to call
  massa.model.v1.NativeAddress target_sc_address = 1;
  // Function to call in the targeted smart contract
  string target_function_name = 2;
  // Argument to the function serialized in a byte array.
  bytes function_arg = 3;
  // call_coins is the amount of coins to pay for the call
  massa.model.v1.NativeAmount call_coins = 4;
}

// CallResponse
message CallResponse {
  // Return_data is the return value of the function
  bytes data = 1;
}

// LocalCall
message LocalCallRequest {
  // Address of the smart contract to call
  massa.model.v1.NativeAddress target_sc_address = 1;
  // Function to call in the targeted smart contract
  string target_function_name = 2;
  // Argument to the function serialized in a byte array.
  bytes function_arg = 3;
}

// LocalCallResponse
message LocalCallResponse {
  // Return_data is the return value of the function
  bytes data = 1;
}

// GenerateEventRequest
message GenerateEventRequest {
  // Event
  string event = 1;
}

// TransferCoins
message TransferCoinsRequest {
  // The address of the recipient
  massa.model.v1.NativeAddress target_address = 1;
  // The amount of coins to transfer
  massa.model.v1.NativeAmount amount_to_transfer = 2;
}

// FunctionExists
message FunctionExistsRequest {
  // Address of the smart contract to call
  massa.model.v1.NativeAddress target_sc_address = 1;
  // The name of the function to check the existance of
  string function_name = 2;
}

// FunctionExistsResponse
message FunctionExistsResponse {
  // Exists is true if the function exists
  bool exists = 1;
}

// Message returned in case of success of an ABI call.
// See the documentation of the specific result for the meaning of the fields.
// Call RespResult because Result will conflict with the Result type in Rust
// data MUSTÂ have the same name as they type in Rust they are converted to type
message RespResult {
  oneof res {
    NativeAddressToStringResult native_address_to_string_result = 1;
    NativePubKeyToStringResult native_pub_key_to_string_result = 2;
    NativeSigToStringResult native_sig_to_string_result = 3;
    NativeHashToStringResult native_hash_to_string_result = 4;
    NativeAmountToStringResult native_amount_to_string_result = 5;
    NativeAddressFromStringResult native_address_from_string_result = 6;
    NativePubKeyFromStringResult native_pub_key_from_string_result = 7;
    NativeSigFromStringResult native_sig_from_string_result = 8;
    NativeHashFromStringResult native_hash_from_string_result = 9;
    NativeAmountFromStringResult native_amount_from_string_result = 10;
    CheckNativeAddressResult check_native_address_result = 11;
    CheckNativePubKeyResult check_native_pub_key_result = 12;
    CheckNativeSigResult check_native_sig_result = 13;
    CheckNativeHashResult check_native_hash_result = 14;
    CheckNativeAmountResult check_native_amount_result = 15;
    AddNativeAmountsResult add_native_amounts_result = 16;
    SubNativeAmountsResult sub_native_amounts_result = 17;
    MulNativeAmountResult mul_native_amount_result = 18;
    ScalarDivRemNativeAmountResult scalar_div_rem_native_amount_result = 19;
    DivRemNativeAmountResult div_rem_native_amount_result = 20;
    CheckedAddNativeTimeResult checked_add_native_time_result = 21;
    CheckedSubNativeTimeResult checked_sub_native_time_result = 22;
    CheckedMulNativeTimeResult checked_mul_native_time_result = 23;
    CheckedScalarDivRemNativeTimeResult checked_scalar_div_rem_native_time_result = 24;
    CheckedDivRemNativeTimeResult checked_div_rem_native_time_result = 25;
    CompareNativeTimeResult compare_native_time_result = 26;
    CompareNativeAddressResult compare_native_address_result = 27;
    CompareNativePubKeyResult compare_native_pub_key_result = 28;
    CompareNativeSigResult compare_native_sig_result = 29;
    VerifyNativeSigResult verify_native_sig_result = 30;
  }
}

// Generic message that encapsulate response from ABI calls.
message AbiResponse {
  oneof resp {
    // variant for success
    RespResult res = 1;
    // variant for error
    Error error = 2;
  }
}

// Address to string request
message NativeAddressToStringRequest {
  // Address to convert to string
  massa.model.v1.NativeAddress to_convert = 1;
}

// Address to string result
message NativeAddressToStringResult {
  // Converted address
  string converted_address = 1;
}

// PubKey to string request
message NativePubKeyToStringRequest {
  // PubKey to convert to string
  massa.model.v1.NativePubKey to_convert = 1;
}
message NativePubKeyToStringResult {
  // Converted PubKey
  string converted_pubkey = 1;
}

// Sig to string request
message NativeSigToStringRequest {
  // Sig to convert to string
  massa.model.v1.NativeSig to_convert = 1;
}

// Sig to string result
message NativeSigToStringResult {
  // Converted Sig
  string converted_sig = 1;
}

// Hash to string request
message NativeHashToStringRequest {
  // Hash to convert to string
  massa.model.v1.NativeHash to_convert = 1;
}

// Hash to string result
message NativeHashToStringResult {
  // Converted Hash
  string converted_hash = 1;
}

// Amount to string request
message NativeAmountToStringRequest {
  // Amount to convert to string
  massa.model.v1.NativeAmount to_convert = 1;
}

// Amount to string result
message NativeAmountToStringResult {
  // Converted Amount
  string converted_amount = 1;
}

// Address from string request
message NativeAddressFromStringRequest {
  // String to convert to address
  string to_convert = 1;
}

// Address from string result
message NativeAddressFromStringResult {
  // Converted address
  massa.model.v1.NativeAddress converted_address = 1;
}

// PubKey from string request
message NativePubKeyFromStringRequest {
  // String to convert to PubKey
  string to_convert = 1;
}

// PubKey from string result
message NativePubKeyFromStringResult {
  // Converted PubKey
  massa.model.v1.NativePubKey converted_pubkey = 1;
}

// Sig from string request
message NativeSigFromStringRequest {
  // String to convert to Sig
  string to_convert = 1;
}

// Sig from string result
message NativeSigFromStringResult {
  // Converted Sig
  massa.model.v1.NativeSig converted_sig = 1;
}

// Hash from string request
message NativeHashFromStringRequest {
  // String to convert to Hash
  string to_convert = 1;
}

// Hash from string result
message NativeHashFromStringResult {
  // Converted Hash
  massa.model.v1.NativeHash converted_hash = 1;
}

// Amount from string request
message NativeAmountFromStringRequest {
  // String to convert to Amount
  string to_convert = 1;
}

// Amount from string result
message NativeAmountFromStringResult {
  // Converted Amount
  massa.model.v1.NativeAmount converted_amount = 1;
}

// Check address request
message CheckNativeAddressRequest {
  // Address to check
  massa.model.v1.NativeAddress to_check = 1;
}

// Check address result
message CheckNativeAddressResult {
  // Is address valid
  bool is_valid = 1;
}

// Check PubKey request
message CheckNativePubKeyRequest {
  // PubKey to check
  massa.model.v1.NativePubKey to_check = 1;
}

// Check PubKey result
message CheckNativePubKeyResult {
  // Is PubKey valid
  bool is_valid = 1;
}

// Check Sig request
message CheckNativeSigRequest {
  // Sig to check
  massa.model.v1.NativeSig to_check = 1;
}

// Check Sig result
message CheckNativeSigResult {
  // Is Sig valid
  bool is_valid = 1;
}

// Check Hash request
message CheckNativeHashRequest {
  // Hash to check
  massa.model.v1.NativeHash to_check = 1;
}

// Check Hash result
message CheckNativeHashResult {
  // Is Hash valid
  bool is_valid = 1;
}

// Check Amount request
message CheckNativeAmountRequest {
  // Amount to check
  massa.model.v1.NativeAmount to_check = 1;
}

// Check Amount result
message CheckNativeAmountResult {
  // Is Amount valid
  bool is_valid = 1;
}

// Amount addition request
message AddNativeAmountsRequest {
  // First amount to add
  massa.model.v1.NativeAmount amount1 = 1;
  // Second amount to add
  massa.model.v1.NativeAmount amount2 = 2;
}

// Amount addition result
message AddNativeAmountsResult {
  // Sum of amounts
  massa.model.v1.NativeAmount sum = 1;
}

// Amount subtraction request
// try to compute difference = left - right
// fails if right > left
message SubNativeAmountsRequest {
  // First amount to subtract from
  massa.model.v1.NativeAmount left = 1;
  // Second amount to subtract
  massa.model.v1.NativeAmount right = 2;
}

// Amount subtraction result
message SubNativeAmountsResult {
  // Difference of amounts (left - right)
  massa.model.v1.NativeAmount difference = 1;
}

// Amount multiplication request
// Try to compute product = amount * coefficient (fail if overflow)
message MulNativeAmountRequest {
  // Amount to multiply
  massa.model.v1.NativeAmount amount = 1;
  // Coefficient to multiply by
  int64 coefficient = 2;
}

// Amount multiplication result
message MulNativeAmountResult {
  // Product of amount and coefficient
  massa.model.v1.NativeAmount product = 1;
}

// Amount division by scalar request
// Try to compute quotient = dividend / divisor
// Fails if divisor == 0
// Fails if underflow
message ScalarDivRemNativeAmountRequest {
  // Amount to divide
  massa.model.v1.NativeAmount dividend = 1;
  // Divisor to divide by
  int64 divisor = 2;
}

// Amount division by scalar result
message ScalarDivRemNativeAmountResult {
  // Quotient of amount and divisor
  massa.model.v1.NativeAmount quotient = 1;
  // Remainder of amount and divisor
  massa.model.v1.NativeAmount remainder = 2;
}

// Amount division request
message DivRemNativeAmountRequest {
  // Amount to divide
  massa.model.v1.NativeAmount dividend = 1;
  // Divisor to divide by
  massa.model.v1.NativeAmount divisor = 2;
}

// Amount division result
message DivRemNativeAmountResult {
  // Quotient of amount and divisor
  int64 quotient = 1;
  // Remainder of amount and divisor
  massa.model.v1.NativeAmount remainder = 2;
}

// Comparison result
message ComparisonResult {
  // Left is lower
  message LeftLower {}
  // Left is equal to right
  message Equal {}
  // Left is greater
  message LeftGreater {}
  // Status
  oneof restult {
    LeftLower left_lower = 1;
    Equal equal = 2;
    LeftGreater left_greater = 3;
  }
}

// Time addition checked request
message CheckedAddNativeTimeRequest {
  // First time to add
  massa.model.v1.NativeTime left = 1;
  // Second time to add
  massa.model.v1.NativeTime right = 2;
}

// Time addition checked result
message CheckedAddNativeTimeResult {
  // Sum of times
  massa.model.v1.NativeTime sum = 1;
}

// Time subtraction checked request
message CheckedSubNativeTimeRequest {
  // First time to subtract from
  massa.model.v1.NativeTime left = 1;
  // Second time to subtract
  massa.model.v1.NativeTime right = 2;
}

// Time subtraction checked result
message CheckedSubNativeTimeResult {
  // Difference of times (left - right)
  massa.model.v1.NativeTime difference = 1;
}

// Time scalar mult checked request
message CheckedMulNativeTimeRequest {
  // Time to multiply
  massa.model.v1.NativeTime time = 1;
  // Coefficient to multiply by
  int64 coefficient = 2;
}

// Time scalar mult checked result
message CheckedMulNativeTimeResult {
  // Product of time and coefficient
  massa.model.v1.NativeTime product = 1;
}

// Time scalar divrem checked request
message CheckedScalarDivRemNativeTimeRequest {
  // Time to divide
  massa.model.v1.NativeTime dividend = 1;
  // Divisor to divide by
  int64 divisor = 2;
}

// Time scalar divrem checked result
message CheckedScalarDivRemNativeTimeResult {
  // Quotient of time and divisor
  massa.model.v1.NativeTime quotient = 1;
  // Remainder of time and divisor
  massa.model.v1.NativeTime remainder = 2;
}

// Time division checked request
message CheckedDivRemNativeTimeRequest {
  // Time to divide
  massa.model.v1.NativeTime dividend = 1;
  // Divisor to divide by
  massa.model.v1.NativeTime divisor = 2;
}

// Time division checked result
message CheckedDivRemNativeTimeResult {
  // Quotient of time and divisor
  int64 quotient = 1;
  // Remainder of time and divisor
  massa.model.v1.NativeTime remainder = 2;
}

// Time comparison request
message CompareNativeTimeRequest {
  // First time to compare
  massa.model.v1.NativeTime left = 1;
  // Second time to compare
  massa.model.v1.NativeTime right = 2;
}

// Time comparison result
message CompareNativeTimeResult {
  // Comparison result
  ComparisonResult result = 1;
}

// Compare NativeAddress request
message CompareNativeAddressRequest {
  // First address to compare
  massa.model.v1.NativeAddress left = 1;
  // Second address to compare
  massa.model.v1.NativeAddress right = 2;
}

// Compare NativeAddress result
message CompareNativeAddressResult {
  // Comparison result
  ComparisonResult result = 1;
}

// Compare NativePubKey request
message CompareNativePubKeyRequest {
  // First public key to compare
  massa.model.v1.NativePubKey left = 1;
  // Second public key to compare
  massa.model.v1.NativePubKey right = 2;
}

// Compare NativePubKey result
message CompareNativePubKeyResult {
  // Comparison result
  ComparisonResult result = 1;
}

// Compare NativeSig request
message CompareNativeSigRequest {
  // First signature to compare
  massa.model.v1.NativeSig left = 1;
  // Second signature to compare
  massa.model.v1.NativeSig right = 2;
}

// Compare NativeSig result
message CompareNativeSigResult {
  // Comparison result
  ComparisonResult result = 1;
}

// Verify NativeSig request
message VerifyNativeSigRequest {
  // Message to verify
  bytes message = 1;
  // Signature to verify
  massa.model.v1.NativeSig sig = 2;
  // Public key to verify with
  massa.model.v1.NativePubKey pub_key = 3;
}

// Verify NativeSig result
message VerifyNativeSigResult {
  // Verification result
  bool is_verified = 1;
}
