// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.model.v1;

import "google/protobuf/wrappers.proto";
import "massa/model/v1/endorsement.proto";
import "massa/model/v1/operation.proto";
import "massa/model/v1/slot.proto";

option csharp_namespace = "Com.Massa.Model.v1";
option go_package = "github.com/massalabs/massa/model/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.model.v1";
option objc_class_prefix = "MMODEL";
option php_namespace = "Com\\Massa\\Model\\V1";
option ruby_package = "Com::Massa::Model::V1";
option swift_prefix = "MMODEL";

// Block
message Block {
  // Signed header
  SignedBlockHeader header = 1;
  // Operations ids
  repeated string operations = 2;
}

// Filled block
message FilledBlock {
  // Signed header
  SignedBlockHeader header = 1;
  // Operations
  repeated FilledOperationEntry operations = 2;
}

// Block header
message BlockHeader {
  // Current network version
  uint32 current_version = 1;
  // Announced network version(Optional)
  google.protobuf.UInt32Value announced_version = 2;
  // Slot
  Slot slot = 3;
  // parents
  repeated string parents = 4;
  // All operations hash
  string operations_hash = 5;
  // Signed endorsements
  repeated SignedEndorsement endorsements = 6;
}

// Filled Operation Tuple
message FilledOperationEntry {
  // Operation id
  string operation_id = 1;
  // Signed operation
  SignedOperation operation = 2;
}

// Signed block
message SignedBlock {
  // Block
  Block content = 1;
  // A cryptographically generated value using `serialized_data` and a public key.
  string signature = 2;
  // The public-key component used in the generation of the signature
  string content_creator_pub_key = 3;
  // Derived from the same public key used to generate the signature
  string content_creator_address = 4;
  // A secure hash of the non-malleable contents of a deterministic binary representation of the block header
  string secure_hash = 5;
  // The size of the serialized block in bytes
  uint64 serialized_size = 6;
}

// Signed block header
message SignedBlockHeader {
  // BlockHeader
  BlockHeader content = 1;
  // A cryptographically generated value using `serialized_data` and a public key.
  string signature = 2;
  // The public-key component used in the generation of the signature
  string content_creator_pub_key = 3;
  // Derived from the same public key used to generate the signature
  string content_creator_address = 4;
  // A secure hash of the non-malleable contents of a deterministic binary representation of the block header
  string secure_hash = 5;
  // The size of the serialized block header in bytes
  uint64 serialized_size = 6;
}

// Possible statuses for a block
enum BlockStatus {
  BLOCK_STATUS_UNSPECIFIED = 0; // Default enum value
  BLOCK_STATUS_NON_FINAL_BLOCKCLIQUE = 1; // The block is in the greatest clique (and not final)
  BLOCK_STATUS_FINAL = 2; // The block is final
  BLOCK_STATUS_NON_FINAL_ALTERNATE_CLIQUE = 3; // The block is candidate (active any clique but not final)
  BLOCK_STATUS_DISCARDED = 4; // The block is discarded
}

// A wrapper around a block with its metadata
message BlockWrapper {
  // The unique ID of the block.
  string block_id = 1;
  // The block object itself
  Block block = 2;
  // The execution status of the block
  BlockStatus status = 3;
}

// Informations about a block with its metadata
message BlockInfo {
  // The unique ID of the block.
  string block_id = 1;
  // The execution status of the block
  BlockStatus status = 2;
}

// BlockIds holds block ids
message BlockIds {
  // Block ids
  repeated string block_ids = 1;
}

// Block parent tuple
message BlockParent {
  // Block id
  string block_id = 1;
  // Period
  uint64 period = 2;
}
