// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.model.v1;

import "massa/model/v1/amount.proto";
import "massa/model/v1/commons.proto";

option csharp_namespace = "Com.Massa.Model.v1";
option go_package = "github.com/massalabs/massa/model/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.model.v1";
option objc_class_prefix = "MMODEL";
option php_namespace = "Com\\Massa\\Model\\V1";
option ruby_package = "Com::Massa::Model::V1";
option swift_prefix = "MMODEL";

// The operation as sent in the network
message Operation {
  // The fee they have decided for this operation
  massa.model.v1.NativeAmount fee = 1;
  // After `expire_period` slot the operation won't be included in a block
  uint64 expire_period = 2;
  // The type specific operation part
  OperationType op = 3;
}

// Type specific operation content
message OperationType {
  oneof type {
    // Transfer coins from sender to recipient
    Transaction transaction = 1;
    // The sender buys `roll_count` rolls. Roll price is defined in configuration
    RollBuy roll_buy = 2;
    // The sender sells `roll_count` rolls. Roll price is defined in configuration
    RollSell roll_sell = 3;
    // Execute a smart contract
    ExecuteSC execut_sc = 4;
    // Calls an exported function from a stored smart contract
    CallSC call_sc = 5;
  }
}

// Transfer coins from sender to recipient
message Transaction {
  // Recipient address
  string recipient_address = 1;
  // Amount
  massa.model.v1.NativeAmount amount = 2;
}

// The sender buys `roll_count` rolls. Roll price is defined in configuration
message RollBuy {
  // Roll count
  uint64 roll_count = 1;
}

// The sender sells `roll_count` rolls. Roll price is defined in configuration
message RollSell {
  // Roll count
  uint64 roll_count = 1;
}

// Execute a smart contract
message ExecuteSC {
  // Smart contract bytecode.
  bytes data = 1;
  // The maximum of coins that could be spent by the operation sender
  uint64 max_coins = 2;
  // The maximum amount of gas that the execution of the contract is allowed to cost
  uint64 max_gas = 3;
  // A key-value store associating a hash to arbitrary bytes
  repeated BytesMapFieldEntry datastore = 4;
}

// Calls an exported function from a stored smart contract
message CallSC {
  // Target smart contract address
  string target_addr = 1;
  // Target function name. No function is called if empty
  string target_func = 2;
  // Parameter to pass to the target function
  bytes param = 3;
  // The maximum amount of gas that the execution of the contract is allowed to cost
  uint64 max_gas = 4;
  // Extra coins that are spent from the caller's balance and transferred to the target
  massa.model.v1.NativeAmount coins = 5;
}

// Signed operation
message SignedOperation {
  // Operation
  Operation content = 1;
  // A cryptographically generated value using `serialized_data` and a public key.
  string signature = 2;
  // The public-key component used in the generation of the signature
  string content_creator_pub_key = 3;
  // Derived from the same public key used to generate the signature
  string content_creator_address = 4;
  // A secure hash of the non-malleable contents of a deterministic binary representation of the block header
  string secure_hash = 5;
  // The size of the serialized operation in bytes
  uint64 serialized_size = 6;
}

// A wrapper around an operation with its metadata
message OperationWrapper {
  // The unique ID of the operation.
  string id = 1;
  // The IDs of the blocks in which the operation appears
  repeated string block_ids = 2;
  // The thread in which the operation can be included
  uint32 thread = 3;
  // The operation object itself
  SignedOperation operation = 4;
}

// Information about an operation with its metadata
message OperationInfo {
  // The unique ID of the operation.
  string id = 1;
  // The IDs of the blocks in which the operation appears
  repeated string block_ids = 2;
  // The thread in which the operation can be included
  uint32 thread = 3;
}

// OperationIds
message OperationIds {
  // Operations ids
  repeated string operation_ids = 1;
}

// OpTypes
message OpTypes {
  // Operations types
  repeated OpType op_types = 1;
}

// Operation type enum
enum OpType {
  OP_TYPE_UNSPECIFIED = 0; // Default enum value
  OP_TYPE_TRANSACTION = 1; // Transaction
  OP_TYPE_ROLL_BUY = 2; // Roll buy
  OP_TYPE_ROLL_SELL = 3; // Roll sell
  OP_TYPE_EXECUTE_SC = 4; // Execute smart contract
  OP_TYPE_CALL_SC = 5; // Call smart contract
}
