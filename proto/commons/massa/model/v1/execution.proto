// Copyright (c) 2023 MASSA LABS <info@massa.net>

syntax = "proto3";

package massa.model.v1;

import "google/rpc/status.proto";
import "massa/model/v1/commons.proto";
import "massa/model/v1/slot.proto";

option csharp_namespace = "Com.Massa.Model.v1";
option go_package = "github.com/massalabs/massa/model/v1;v1";
option java_multiple_files = true;
option java_package = "com.massa.model.v1";
option objc_class_prefix = "MMODEL";
option php_namespace = "Com\\Massa\\Model\\V1";
option ruby_package = "Com::Massa::Model::V1";
option swift_prefix = "MMODEL";

// SlotExecutionOutput
message SlotExecutionOutput {
  // Status
  repeated ExecutionOutputStatus status = 1;
  // Executed slot output
  ExecutionOutput execution_output = 2;
}

// FinalizedExecutionOutput
message FinalizedExecutionOutput {
  // Slot
  massa.model.v1.Slot slot = 1;
}

// ExecutionOutput
message ExecutionOutput {
  // Slot
  massa.model.v1.Slot slot = 1;
  // Block id at that slot (optional)
  optional string block_id = 2;
  // Events emitted by the execution step
  repeated ScExecutionEvent events = 3;
  // State changes caused by the execution step
  StateChanges state_changes = 4;
}

// ScExecutionEvent
message ScExecutionEvent {
  // Sc execution context
  ScExecutionEventContext context = 1;
  // json data string
  string data = 2;
}

// ScExecutionEvent context
message ScExecutionEventContext {
  // base58 encoded slot(period + thread) + index_in_slot
  string id = 1;
  // When was it generated
  massa.model.v1.Slot origin_slot = 2;
  // Block id if there was a block at that slot (optional)
  optional string block_id = 3;
  // Index of the event in the slot
  uint64 index_in_slot = 4;
  // Call stack addresses. most recent at the end
  repeated string call_stack = 5;
  // Origin operation id (optional)
  optional string origin_operation_id = 6;
  // Status
  repeated ScExecutionEventStatus status = 7;
}

// ScExecutionEventStatus type enum
enum ScExecutionEventStatus {
  SC_EXECUTION_EVENT_STATUS_UNSPECIFIED = 0; // Default enum value
  SC_EXECUTION_EVENT_STATUS_FINAL = 1; // Final status
  SC_EXECUTION_EVENT_STATUS_READ_ONLY = 2; // Read only status
  SC_EXECUTION_EVENT_STATUS_FAILURE = 3; // Failure status
}

// ExecutionOutputStatus type enum
enum ExecutionOutputStatus {
  EXECUTION_OUTPUT_STATUS_UNSPECIFIED = 0; // Default enum value
  EXECUTION_OUTPUT_STATUS_CANDIDATE = 1; // Candidate status
  EXECUTION_OUTPUT_STATUS_FINAL = 2; // Final status
}

// StateChanges
message StateChanges {
  // Ledger changes
  repeated LedgerChangeEntry ledger_changes = 1;
  // Asynchronous pool changes
  repeated AsyncPoolChangeEntry async_pool_changes = 2;
  // Executed operations changes
  repeated ExecutedOpsChangeEntry executed_ops_changes = 4;
  // Executed denunciations changes
  repeated DenunciationIndex executed_denunciations_changes = 5;
}

// ExecutedOpsChangeEntry
message ExecutedOpsChangeEntry {
  // string
  string operation_id = 1;
  // ExecutedOpsChangeValue
  ExecutedOpsChangeValue value = 2;
}

// ExecutedOpsChangeValue
message ExecutedOpsChangeValue {
  // The status of the execution of the operation
  repeated OperationExecutionStatus status = 1;
  // Slot until which the operation remains valid (included)
  massa.model.v1.Slot slot = 2;
}

// OperationExecutionStatus type enum
enum OperationExecutionStatus {
  OPERATION_EXECUTION_STATUS_UNSPECIFIED = 0; // Default enum value
  OPERATION_EXECUTION_STATUS_SUCCESS = 1; // Success status
  OPERATION_EXECUTION_STATUS_FAILED = 2; // Failed only status
}

// AsyncPoolChange Entry
message AsyncPoolChangeEntry {
  // Async message id
  string async_message_id = 1;
  // AsyncPool message
  AsyncPoolChangeValue value = 2;
}

// AsyncPoolChangeValue
message AsyncPoolChangeValue {
  // The type of the change
  AsyncPoolChangeType type = 1;
  // AsyncPool message
  oneof message {
    // Created ledger entry
    AsyncMessage created_message = 2;
    // Update ledger entry
    AsyncMessageUpdate updated_message = 3;
  }
}

// AsyncPoolChangeType type enum
enum AsyncPoolChangeType {
  ASYNC_POOL_CHANGE_TYPE_UNSPECIFIED = 0; // Default enum value
  ASYNC_POOL_CHANGE_TYPE_SET = 1; // Set type
  ASYNC_POOL_CHANGE_TYPE_UPDATE = 2; // Activate only type
  ASYNC_POOL_CHANGE_TYPE_DELETE = 3; // Delete only type
}

// Asynchronous smart contract message
message AsyncMessage {
  // Slot at which the message was emitted
  massa.model.v1.Slot emission_slot = 1;
  // Index of the emitted message within the `emission_slot`.
  // This is used for disambiguate the emission of multiple messages at the same slot.
  uint64 emission_index = 2;
  // The address that sent the message
  string sender = 3;
  // The address towards which the message is being sent
  string destination = 4;
  // the handler function name within the destination address' bytecode
  string handler = 5;
  // Maximum gas to use when processing the message
  uint64 max_gas = 6;
  // Fee paid by the sender when the message is processed.
  uint64 fee = 7;
  // Coins sent from the sender to the target address of the message.
  // Those coins are spent by the sender address when the message is sent,
  // and credited to the destination address when receiving the message.
  // In case of failure or discard, those coins are reimbursed to the sender.
  uint64 coins = 8;
  // Slot at which the message starts being valid (bound included in the validity range)
  massa.model.v1.Slot validity_start = 9;
  // Slot at which the message stops being valid (bound not included in the validity range)
  massa.model.v1.Slot validity_end = 10;
  // Raw payload data of the message
  bytes data = 11;
  // Trigger that define whenever a message can be executed
  AsyncMessageTrigger trigger = 12;
  // Boolean that determine if the message can be executed. For messages without filter this boolean is always true.
  // For messages with filter, this boolean is true if the filter has been matched between `validity_start` and current slot.
  bool can_be_executed = 13;
  // Hash of the message
  string hash = 14;
}

// Asynchronous smart contract message
message AsyncMessageUpdate {
  // Change the slot at which the message was emitted
  SetOrKeepSlot emission_slot = 1;
  // Change the index of the emitted message within the `emission_slot`.
  // This is used for disambiguate the emission of multiple messages at the same slot.
  SetOrKeepFixed64 emission_index = 2;
  // Change the address that sent the message
  SetOrKeepString sender = 3;
  // Change the address towards which the message is being sent
  SetOrKeepString destination = 4;
  // Change the handler function name within the destination address' bytecode
  SetOrKeepString handler = 5;
  // Change the maximum gas to use when processing the message
  SetOrKeepFixed64 max_gas = 6;
  // Change the fee paid by the sender when the message is processed.
  SetOrKeepFixed64 fee = 7;
  // Change the coins sent from the sender to the target address of the message.
  // Those coins are spent by the sender address when the message is sent,
  // and credited to the destination address when receiving the message.
  // In case of failure or discard, those coins are reimbursed to the sender.
  SetOrKeepFixed64 coins = 8;
  // Change the slot at which the message starts being valid (bound included in the validity range)
  SetOrKeepSlot validity_start = 9;
  // Change the slot at which the message stops being valid (bound not included in the validity range)
  SetOrKeepSlot validity_end = 10;
  // Change the raw payload data of the message
  SetOrKeepBytes data = 11;
  // Change the trigger that define whenever a message can be executed
  SetOrKeepAsyncMessageTrigger trigger = 12;
  // Change the boolean that determine if the message can be executed. For messages without filter this boolean is always true.
  // For messages with filter, this boolean is true if the filter has been matched between `validity_start` and current slot.
  SetOrKeepBool can_be_executed = 13;
  // Change the hash of the message
  SetOrKeepString hash = 14;
}

// Set or Keep Slot
message SetOrKeepSlot {
  // The type of the change
  SetOrKeepType type = 1;
  // The value of that entry (optional)
  optional massa.model.v1.Slot value = 2;
}

// Set or Keep Fixed64
message SetOrKeepFixed64 {
  // The type of the change
  SetOrKeepType type = 1;
  // The value of that entry (optional)
  optional uint64 value = 2;
}

// Set or Keep String
message SetOrKeepString {
  // The type of the change
  SetOrKeepType type = 1;
  // The value of that entry (optional)
  optional string value = 2;
}

// Set or Keep Bytes
message SetOrKeepBytes {
  // The type of the change
  SetOrKeepType type = 1;
  // The value of that entry (optional)
  optional bytes value = 2;
}

// Set or Keep Bool
message SetOrKeepBool {
  // The type of the change
  SetOrKeepType type = 1;
  // The value of that entry (optional)
  optional bool value = 2;
}

// Set or Keep AsyncMessageTrigger
message SetOrKeepAsyncMessageTrigger {
  // The type of the change
  SetOrKeepType type = 1;
  // The value of that entry (optional)
  optional AsyncMessageTrigger value = 2;
}

// Structure defining a trigger for an asynchronous message
message AsyncMessageTrigger {
  // Filter on the address
  string address = 1;
  // Filter on the datastore key (optional)
  optional bytes datastore_key = 2;
}

// LedgerChangeEntry
message LedgerChangeEntry {
  // Address
  string address = 1;
  // Ledger message
  LedgerChangeValue value = 2;
}

// LedgerChangeValue
message LedgerChangeValue {
  // The type of the change
  LedgerChangeType type = 1;
  // LedgerEntry or LedgerEntryUpdate
  oneof entry {
    // Created ledger entry
    LedgerEntry created_entry = 2;
    // Update ledger entry
    LedgerEntryUpdate updated_entry = 3;
  }
}

// LedgerChangeType type enum
enum LedgerChangeType {
  LEDGER_CHANGE_TYPE_UNSPECIFIED = 0; // Default enum value
  LEDGER_CHANGE_TYPE_SET = 1; // Set type
  LEDGER_CHANGE_TYPE_UPDATE = 2; // Update type
  LEDGER_CHANGE_TYPE_DELETE = 3; // Delete type
}

// An entry associated to an address in the `FinalLedger`
message LedgerEntry {
  // The balance of that entry
  uint64 balance = 1;
  // Executable bytecode
  bytes bytecode = 2;
  // A key-value store associating a hash to arbitrary bytes
  repeated massa.model.v1.BytesMapFieldEntry entries = 3;
}

// Represents an update to one or more fields of a `LedgerEntry`
message LedgerEntryUpdate {
  // Change the balance
  SetOrKeepBalance balance = 1;
  // Change the executable bytecode
  SetOrKeepBytecode bytecode = 2;
  // Change datastore entries
  repeated SetOrDeleteDatastoreEntry datastore = 3;
}

// Set or Keep Balance
message SetOrKeepBalance {
  // The type of the change
  SetOrKeepType type = 1;
  // The balance of that entry (optional)
  optional uint64 balance = 2;
}

// Set or Keep Bytecode
message SetOrKeepBytecode {
  // The type of the change
  SetOrKeepType type = 1;
  // Executable bytecode (optional)
  optional bytes bytecode = 2;
}

// Set or Delete DatastoreEntry
message SetOrDeleteDatastoreEntry {
  // The type of the change
  SetOrDeleteType type = 1;
  // The balance of that entry (optioal)
  optional massa.model.v1.BytesMapFieldEntry datastore_entry = 2;
}

// SetOrKeepType type enum
enum SetOrKeepType {
  SET_OR_KEEP_TYPE_UNSPECIFIED = 0; // Default enum value
  SET_OR_KEEP_TYPE_SET = 1; // Sets a new absolute value
  SET_OR_KEEP_TYPE_KEEP = 2; // Keeps the existing value
}

// SetOrDeleteType type enum
enum SetOrDeleteType {
  SET_OR_DELETE_TYPE_UNSPECIFIED = 0; // Default enum value
  SET_OR_DELETE_TYPE_SET = 1; // Sets a new absolute value
  SET_OR_DELETE_TYPE_DELETE = 2; // Deletes the existing value
}

// Index for Denunciations in collections (e.g. like a HashMap...)
message DenunciationIndex {
  // DenunciationBlockHeader or DenunciationEndorsement
  oneof entry {
    // Denunciation block header
    DenunciationBlockHeader block_header = 1;
    // Denunciation endorsement
    DenunciationEndorsement endorsement = 2;
  }
}

// Variant for Block header denunciation index
message DenunciationBlockHeader {
  // Denounciation slot
  massa.model.v1.Slot slot = 1;
}

// Variant for Endorsement denunciation index
message DenunciationEndorsement {
  // Denounciation slot
  massa.model.v1.Slot slot = 1;
  // Denounciation index
  uint32 index = 2;
}

// Query state query item
message ExecutionQueryRequestItem {
  oneof request_item {
    // Checks if address exists (candidate)
    AddressExistsCandidate address_exists_candidate = 1;
    // Checks if address exists (final)
    AddressExistsFinal address_exists_final = 2;
    // Gets the balance (candidate) of an address
    AddressBalanceCandidate address_balance_candidate = 3;
    // Gets the balance (final) of an address
    AddressBalanceFinal address_balance_final = 4;
    // Gets the bytecode (candidate) of an address
    AddressBytecodeCandidate address_bytecode_candidate = 5;
    // Gets the bytecode (final) of an address
    AddressBytecodeFinal address_bytecode_final = 6;
    // Gets the datastore keys (candidate) of an address
    AddressDatastoreKeysCandidate address_datastore_keys_candidate = 7;
    // Gets the datastore keys (final) of an address
    AddressDatastoreKeysFinal address_datastore_keys_final = 8;
    // Gets a datastore value (candidate) for an address
    AddressDatastoreValueCandidate address_datastore_value_candidate = 9;
    // Gets a datastore value (final) for an address
    AddressDatastoreValueFinal address_datastore_value_final = 10;
    // Gets the execution status (candidate) for an operation
    OpExecutionStatusCandidate op_execution_status_candidate = 11;
    // Gets the execution status (final) for an operation
    OpExecutionStatusFinal op_execution_status_final = 12;
    // Gets the execution status (candidate) for a denunciation
    DenunciationExecutionStatusCandidate denunciation_execution_status_candidate = 13;
    // Gets the execution status (final) for a denunciation
    DenunciationExecutionStatusFinal denunciation_execution_status_final = 14;
    // Gets the roll count (candidate) of an address
    AddressRollsCandidate address_rolls_candidate = 15;
    // Gets the roll count (final) of an address
    AddressRollsFinal address_rolls_final = 16;
    // Gets the deferred credits (candidate) of an address
    AddressDeferredCreditsCandidate address_deferred_credits_candidate = 17;
    // Gets the deferred credits (final) of an address
    AddressDeferredCreditsFinal address_deferred_credits_final = 18;
    // Gets all information for a given cycle
    CycleInfos cycle_infos = 19;
    // Gets filtered events
    Events events = 20;
  }
}

// Execution state query response
message ExecutionQueryResponse {
  // Result or error
  oneof response {
    // Execution query response item
    ExecutionQueryResponseItem result = 2;
    // gRPC error(status)
    google.rpc.Status error = 3;
  }
}

// Execution state query response item
message ExecutionQueryResponseItem {
  oneof response_item {
    // Boolean value
    bool boolean = 1;
    // Roll counts value
    uint64 roll_count = 2;
    // Amount value
    uint64 amount = 3;
    // Bytes value
    bytes bytes = 4;
    // Vector of bytes value
    ArrayOfBytesWrapper vec_bytes = 5;
    // Deferred credits value
    uint64 deferred_credits = 6;
    // Execution status value
    ExecutionQueryExecutionStatus execution_status = 7;
    // Cycle infos value
    ExecutionQueryCycleInfos cycle_infos = 8;
    // Events
    SCOutputEventsWrapper events = 9;
  }
}

// Execution status of an operation or denunciation
enum ExecutionQueryExecutionStatus {
  EXECUTION_QUERY_EXECUTION_STATUS_UNSPECIFIED = 0; // Default enum value
  EXECUTION_QUERY_EXECUTION_STATUS_ALREADY_EXECUTED_WITH_SUCCESS = 1; // The operation or denunciation was executed recently with success
  EXECUTION_QUERY_EXECUTION_STATUS_ALREADY_EXECUTED_WITH_FAILURE = 2; // The operation or denunciation was executed recently with failure
  EXECUTION_QUERY_EXECUTION_STATUS_EXECUTABLE_OR_EXPIRED = 3; // The operation or denunciation was not executed recently but can still be executed unless expired
}

// Cycle information for execution query
message ExecutionQueryCycleInfos {
  // Cycle number
  uint64 cycle = 1;
  // Whether the cycle is final
  bool is_final = 2;
  // Infos for each PoS-participating address among the ones that were asked
  repeated ExecutionQueryStakerInfoEntry staker_infos = 3;
}

// ExecutionQueryStakerInfo entry
message ExecutionQueryStakerInfoEntry {
  // Address of the staker
  string address = 1;
  // Staker info
  ExecutionQueryStakerInfo info = 2;
}

// Staker information for execution query
message ExecutionQueryStakerInfo {
  // Active roll count
  uint64 active_rolls = 1;
  // Production stats
  repeated ExecutionQueryStakerInfoProductionStatsEntry production_stats = 2;
}

// ExecutionQueryStakerInfoProductionStats entry
message ExecutionQueryStakerInfoProductionStatsEntry {
  // Address of the staker
  string address = 1;
  // Production failure
  ExecutionQueryStakerInfoProductionStats stats = 2;
}

// Production statistics for staker info in execution query
message ExecutionQueryStakerInfoProductionStats {
  // Production successes
  uint64 block_success_count = 1;
  // Production failures
  uint64 block_failure_count = 2;
}

// Request to check if address exists (candidate)
message AddressExistsCandidate {
  // Address to check
  string address = 1;
}

// Request to check if address exists (final)
message AddressExistsFinal {
  // Address to check
  string address = 1;
}

// Request to get the balance (candidate) of an address
message AddressBalanceCandidate {
  // Address to query
  string address = 1;
}

// Request to get the balance (final) of an address
message AddressBalanceFinal {
  // Address to query
  string address = 1;
}

// Request to get the bytecode (candidate) of an address
message AddressBytecodeCandidate {
  // Address to query
  string address = 1;
}

// Request to get the bytecode (final) of an address
message AddressBytecodeFinal {
  // Address to query
  string address = 1;
}

// Request to get the datastore keys (candidate) of an address
message AddressDatastoreKeysCandidate {
  // Address to query
  string address = 1;
  // Prefix for the keys
  bytes prefix = 2;
}

// Request to get the datastore keys (final) of an address
message AddressDatastoreKeysFinal {
  // Address to query
  string address = 1;
  // Prefix for the keys
  bytes prefix = 2;
}

// Request to get a datastore value (candidate) for an address
message AddressDatastoreValueCandidate {
  // Address to query
  string address = 1;
  // Key for the value
  bytes key = 2;
}

// Request to get a datastore value (final) for an address
message AddressDatastoreValueFinal {
  // Address to query
  string address = 1;
  // Key for the value
  bytes key = 2;
}

// Request to get the execution status (candidate) for an operation
message OpExecutionStatusCandidate {
  // Operation ID to query
  string operation_id = 1;
}

// Request to get the execution status (final) for an operation
message OpExecutionStatusFinal {
  // Operation ID to query
  string operation_id = 1;
}

// Request to get the execution status (candidate) for a denunciation
message DenunciationExecutionStatusCandidate {
  // Denunciation index to query
  DenunciationIndex denunciation_index = 1;
}

// Request to get the execution status (final) for a denunciation
message DenunciationExecutionStatusFinal {
  // Denunciation index to query
  DenunciationIndex denunciation_index = 1;
}

// Request to get the roll count (candidate) of an address
message AddressRollsCandidate {
  // Address to query
  string address = 1;
}

// Request to get the roll count (final) of an address
message AddressRollsFinal {
  // Address to query
  string address = 1;
}

// Request to get the deferred credits (candidate) of an address
message AddressDeferredCreditsCandidate {
  // Address to query
  string address = 1;
}

// Request to get the deferred credits (final) of an address
message AddressDeferredCreditsFinal {
  // Address to query
  string address = 1;
}

// Request to get all information for a given cycle
message CycleInfos {
  // Cycle to query
  uint64 cycle = 1;
  // Addresses to restrict the query (if None, info for all addresses will be returned)
  repeated string restrict_to_addresses = 2;
}

// Request to get filtered events
message Events {
  // Event filter to apply
  ScExecutionEventsFilter filter = 1;
}

// ScExecutionEvents Filter
message ScExecutionEventsFilter {
  // Start slot (Optional)
  optional massa.model.v1.Slot start_slot = 1;
  // End slot (Optional)
  optional massa.model.v1.Slot end_slot = 2;
  // Caller address
  optional string caller_address = 3;
  // Emitter address (Optional)
  optional string emitter_address = 4;
  // Original operation id (Optional)
  optional string original_operation_id = 5;
  // Status
  repeated ScExecutionEventStatus status = 6;
}

// SCOutputEvents wrapper
message SCOutputEventsWrapper {
  // Events
  repeated ScExecutionEvent event = 1;
}
